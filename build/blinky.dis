
/home/jssmile/Plotter/build/blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <Default_Handler>:
// This is the code that gets called when the processor receives an unexpected
// interrupt.	This simply enters an infinite loop, preserving the system state
// for examination by a debugger.
//
//*****************************************************************************
void Default_Handler(void) {
 8000188:	e7fe      	b.n	8000188 <Default_Handler>
 800018a:	bf00      	nop

0800018c <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 800018c:	4668      	mov	r0, sp
 800018e:	f020 0107 	bic.w	r1, r0, #7
 8000192:	468d      	mov	sp, r1
 8000194:	b519      	push	{r0, r3, r4, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000196:	4913      	ldr	r1, [pc, #76]	; (80001e4 <Reset_Handler+0x58>)
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <Reset_Handler+0x5c>)
 800019a:	4299      	cmp	r1, r3
 800019c:	d20b      	bcs.n	80001b6 <Reset_Handler+0x2a>
 800019e:	43c8      	mvns	r0, r1
 80001a0:	4418      	add	r0, r3
 80001a2:	f020 0003 	bic.w	r0, r0, #3
 80001a6:	4c11      	ldr	r4, [pc, #68]	; (80001ec <Reset_Handler+0x60>)
 80001a8:	3004      	adds	r0, #4
 80001aa:	2300      	movs	r3, #0
	{
		*(pulDest++) = *(pulSrc++);
 80001ac:	58e2      	ldr	r2, [r4, r3]
 80001ae:	50ca      	str	r2, [r1, r3]
 80001b0:	3304      	adds	r3, #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 80001b2:	4283      	cmp	r3, r0
 80001b4:	d1fa      	bne.n	80001ac <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 80001b6:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <Reset_Handler+0x64>)
 80001b8:	4a0e      	ldr	r2, [pc, #56]	; (80001f4 <Reset_Handler+0x68>)
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d20a      	bcs.n	80001d4 <Reset_Handler+0x48>
 80001be:	43d9      	mvns	r1, r3
 80001c0:	4411      	add	r1, r2
 80001c2:	f021 0103 	bic.w	r1, r1, #3
 80001c6:	4419      	add	r1, r3
	{
		*(pulDest++) = 0;
 80001c8:	2200      	movs	r2, #0
 80001ca:	3b04      	subs	r3, #4
 80001cc:	f843 2f04 	str.w	r2, [r3, #4]!


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d1fb      	bne.n	80001cc <Reset_Handler+0x40>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 80001d4:	f000 fc1a 	bl	8000a0c <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 80001d8:	f001 ffa0 	bl	800211c <main>
}
 80001dc:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 80001e0:	4685      	mov	sp, r0
 80001e2:	4770      	bx	lr
 80001e4:	20000000 	.word	0x20000000
 80001e8:	20000024 	.word	0x20000024
 80001ec:	0800217c 	.word	0x0800217c
 80001f0:	20000024 	.word	0x20000024
 80001f4:	20000028 	.word	0x20000028

080001f8 <SysTick_Handler>:
#include "stm32f4xx.h"
#define  PHASE_DELAY   2

volatile uint32_t msTicks;      //counts 1ms timeTicks
void SysTick_Handler(void) {
	msTicks++;
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <SysTick_Handler+0xc>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	3201      	adds	r2, #1
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000024 	.word	0x20000024

08000208 <setSysTick>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(void){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <setSysTick+0x34>)
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <setSysTick+0x38>)
 800020c:	6812      	ldr	r2, [r2, #0]
 800020e:	fba3 1202 	umull	r1, r2, r3, r2
 8000212:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000214:	3a01      	subs	r2, #1
 8000216:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(void){
 800021a:	b410      	push	{r4}
 800021c:	d20c      	bcs.n	8000238 <setSysTick+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <setSysTick+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000222:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000224:	24f0      	movs	r4, #240	; 0xf0
 8000226:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800022a:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800022c:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800022e:	6099      	str	r1, [r3, #8]
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
		// Capture error
		while (1){};
	}
}
 8000230:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	4770      	bx	lr
 8000238:	e7fe      	b.n	8000238 <setSysTick+0x30>
 800023a:	bf00      	nop
 800023c:	20000010 	.word	0x20000010
 8000240:	10624dd3 	.word	0x10624dd3
 8000244:	e000e010 	.word	0xe000e010
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <gpio_init_motor>:

void gpio_init_motor(){
 800024c:	b500      	push	{lr}
    // AHB clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800024e:	2040      	movs	r0, #64	; 0x40
		// Capture error
		while (1){};
	}
}

void gpio_init_motor(){
 8000250:	b083      	sub	sp, #12
    // AHB clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	f000 fe32 	bl	8000ebc <RCC_AHB1PeriphClockCmd>
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
 8000258:	f246 71e0 	movw	r1, #26592	; 0x67e0
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800025c:	2300      	movs	r3, #0
    // AHB clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800025e:	2201      	movs	r2, #1
void gpio_init_motor(){
    // AHB clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
 8000260:	9100      	str	r1, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000262:	4807      	ldr	r0, [pc, #28]	; (8000280 <gpio_init_motor+0x34>)
    // AHB clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000264:	f88d 2004 	strb.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000268:	4669      	mov	r1, sp
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800026a:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800026e:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000272:	f88d 3005 	strb.w	r3, [sp, #5]
    GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000276:	f000 ffc1 	bl	80011fc <GPIO_Init>
}
 800027a:	b003      	add	sp, #12
 800027c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000280:	40021800 	.word	0x40021800

08000284 <config_PWM>:

void config_PWM(void) {
 8000284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef            GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef     TIM_TimeBaseStructure;
    TIM_OCInitTypeDef           TIM_OCInitStructure;
    
    // TIM4 Clock Enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000288:	2004      	movs	r0, #4
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_Init(GPIOG, &GPIO_InitStructure);
}

void config_PWM(void) {
 800028a:	b08a      	sub	sp, #40	; 0x28
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 800028c:	4f2b      	ldr	r7, [pc, #172]	; (800033c <config_PWM+0xb8>)
    TIM_TimeBaseStructure.TIM_Period        = 19999;
    TIM_TimeBaseStructure.TIM_Prescaler     = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800028e:	4c2c      	ldr	r4, [pc, #176]	; (8000340 <config_PWM+0xbc>)
    GPIO_InitTypeDef            GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef     TIM_TimeBaseStructure;
    TIM_OCInitTypeDef           TIM_OCInitStructure;
    
    // TIM4 Clock Enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	f000 fe37 	bl	8000f04 <RCC_APB1PeriphClockCmd>
    
    // GPIOB Clock Enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000296:	2002      	movs	r0, #2
 8000298:	2101      	movs	r1, #1
 800029a:	f000 fe0f 	bl	8000ebc <RCC_AHB1PeriphClockCmd>
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 800029e:	2500      	movs	r5, #0
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
 80002a0:	2303      	movs	r3, #3
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
 80002a2:	2601      	movs	r6, #1
    // GPIOB Clock Enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
 80002a4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80002a8:	4638      	mov	r0, r7
    
    // GPIOB Clock Enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
 80002aa:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80002ac:	4669      	mov	r1, sp
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
 80002ae:	f88d 3005 	strb.w	r3, [sp, #5]
    
    // GPIOB Clock Enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    
    // Initalize PB6 (TIM4 Ch1) and PB7 (TIM4 Ch2)
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
 80002b2:	9200      	str	r2, [sp, #0]
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
 80002b4:	f88d 8004 	strb.w	r8, [sp, #4]
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;    // GPIO_High_Speed
    GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 80002b8:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;         // Weak Pull-up for safety during startup
 80002bc:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80002c0:	f000 ff9c 	bl	80011fc <GPIO_Init>
    
    // Assign Alternate Functions to pins
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 80002c4:	4638      	mov	r0, r7
 80002c6:	4642      	mov	r2, r8
 80002c8:	2106      	movs	r1, #6
 80002ca:	f001 f835 	bl	8001338 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);
 80002ce:	4638      	mov	r0, r7
 80002d0:	4642      	mov	r2, r8
 80002d2:	2107      	movs	r1, #7
 80002d4:	f001 f830 	bl	8001338 <GPIO_PinAFConfig>
     
     */
    uint16_t PrescalerValue = (uint16_t) 84;

    // Time Base Configuration
    TIM_TimeBaseStructure.TIM_Period        = 19999;
 80002d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
    TIM_TimeBaseStructure.TIM_Prescaler     = PrescalerValue;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80002dc:	4620      	mov	r0, r4
     */
    uint16_t PrescalerValue = (uint16_t) 84;

    // Time Base Configuration
    TIM_TimeBaseStructure.TIM_Period        = 19999;
    TIM_TimeBaseStructure.TIM_Prescaler     = PrescalerValue;
 80002de:	2354      	movs	r3, #84	; 0x54
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80002e0:	a902      	add	r1, sp, #8
     
     */
    uint16_t PrescalerValue = (uint16_t) 84;

    // Time Base Configuration
    TIM_TimeBaseStructure.TIM_Period        = 19999;
 80002e2:	9203      	str	r2, [sp, #12]
    TIM_TimeBaseStructure.TIM_Prescaler     = PrescalerValue;
 80002e4:	f8ad 3008 	strh.w	r3, [sp, #8]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80002e8:	f8ad 5010 	strh.w	r5, [sp, #16]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
 80002ec:	f8ad 500a 	strh.w	r5, [sp, #10]
    
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80002f0:	f001 f912 	bl	8001518 <TIM_TimeBaseInit>
    
    // Common TIM Settings
    TIM_OCInitStructure.TIM_OCMode      = TIM_OCMode_PWM1;
 80002f4:	2360      	movs	r3, #96	; 0x60
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse       = 0;                        // Initial duty cycle
    TIM_OCInitStructure.TIM_OCPolarity  = TIM_OCPolarity_High;
    
    // Channel 1
    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 80002f6:	4620      	mov	r0, r4
 80002f8:	a905      	add	r1, sp, #20
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
    
    // Common TIM Settings
    TIM_OCInitStructure.TIM_OCMode      = TIM_OCMode_PWM1;
 80002fa:	f8ad 3014 	strh.w	r3, [sp, #20]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80002fe:	f8ad 6016 	strh.w	r6, [sp, #22]
    TIM_OCInitStructure.TIM_Pulse       = 0;                        // Initial duty cycle
 8000302:	9507      	str	r5, [sp, #28]
    TIM_OCInitStructure.TIM_OCPolarity  = TIM_OCPolarity_High;
 8000304:	f8ad 5020 	strh.w	r5, [sp, #32]
    
    // Channel 1
    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8000308:	f001 f9c4 	bl	8001694 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800030c:	4620      	mov	r0, r4
 800030e:	2108      	movs	r1, #8
 8000310:	f001 fb22 	bl	8001958 <TIM_OC1PreloadConfig>
  
    // Channel 2
    TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8000314:	4620      	mov	r0, r4
 8000316:	a905      	add	r1, sp, #20
 8000318:	f001 f9fc 	bl	8001714 <TIM_OC2Init>
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800031c:	4620      	mov	r0, r4
 800031e:	2108      	movs	r1, #8
 8000320:	f001 fb22 	bl	8001968 <TIM_OC2PreloadConfig>
    
    TIM_ARRPreloadConfig(TIM4, ENABLE);
 8000324:	4620      	mov	r0, r4
 8000326:	4631      	mov	r1, r6
 8000328:	f001 f980 	bl	800162c <TIM_ARRPreloadConfig>
    
    // Start timer
    TIM_Cmd(TIM4, ENABLE);
 800032c:	4620      	mov	r0, r4
 800032e:	4631      	mov	r1, r6
 8000330:	f001 f9a2 	bl	8001678 <TIM_Cmd>
}
 8000334:	b00a      	add	sp, #40	; 0x28
 8000336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800033a:	bf00      	nop
 800033c:	40020400 	.word	0x40020400
 8000340:	40000800 	.word	0x40000800

08000344 <clockwise_A>:
 *    2  0  1  1  0
 *    3  0  1  0  1
 *    4  1  0  0  1
*/
void clockwise_A(int n)
{
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
 8000346:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 *    2  0  1  1  0
 *    3  0  1  0  1
 *    4  1  0  0  1
*/
void clockwise_A(int n)
{
 800034a:	4607      	mov	r7, r0
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
 800034c:	4856      	ldr	r0, [pc, #344]	; (80004a8 <clockwise_A+0x164>)
 800034e:	f000 ffe5 	bl	800131c <GPIO_ResetBits>
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
 8000352:	2f00      	cmp	r7, #0
 8000354:	f340 80a7 	ble.w	80004a6 <clockwise_A+0x162>
 8000358:	4c54      	ldr	r4, [pc, #336]	; (80004ac <clockwise_A+0x168>)
 800035a:	2600      	movs	r6, #0
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
 800035c:	4625      	mov	r5, r4
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
 800035e:	4852      	ldr	r0, [pc, #328]	; (80004a8 <clockwise_A+0x164>)
 8000360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000364:	f000 ffd8 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000368:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800036a:	6823      	ldr	r3, [r4, #0]
 800036c:	1a9b      	subs	r3, r3, r2
 800036e:	2b02      	cmp	r3, #2
 8000370:	d3fb      	bcc.n	800036a <clockwise_A+0x26>
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
 8000372:	484d      	ldr	r0, [pc, #308]	; (80004a8 <clockwise_A+0x164>)
 8000374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000378:	f000 ffd0 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800037c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800037e:	6823      	ldr	r3, [r4, #0]
 8000380:	1a9b      	subs	r3, r3, r2
 8000382:	2b02      	cmp	r3, #2
 8000384:	d3fb      	bcc.n	800037e <clockwise_A+0x3a>
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
 8000386:	4848      	ldr	r0, [pc, #288]	; (80004a8 <clockwise_A+0x164>)
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	f000 ffc4 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000390:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	1a9b      	subs	r3, r3, r2
 8000396:	2b02      	cmp	r3, #2
 8000398:	d3fb      	bcc.n	8000392 <clockwise_A+0x4e>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
 800039a:	4843      	ldr	r0, [pc, #268]	; (80004a8 <clockwise_A+0x164>)
 800039c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a0:	f000 ffbc 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80003a4:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d3fb      	bcc.n	80003a6 <clockwise_A+0x62>
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
 80003ae:	483e      	ldr	r0, [pc, #248]	; (80004a8 <clockwise_A+0x164>)
 80003b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b4:	f000 ffb2 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80003b8:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80003ba:	6823      	ldr	r3, [r4, #0]
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d3fb      	bcc.n	80003ba <clockwise_A+0x76>
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
 80003c2:	4839      	ldr	r0, [pc, #228]	; (80004a8 <clockwise_A+0x164>)
 80003c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c8:	f000 ffa6 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80003cc:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80003ce:	6823      	ldr	r3, [r4, #0]
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	d3fb      	bcc.n	80003ce <clockwise_A+0x8a>
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
 80003d6:	4834      	ldr	r0, [pc, #208]	; (80004a8 <clockwise_A+0x164>)
 80003d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003dc:	f000 ff9c 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80003e0:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80003e2:	6823      	ldr	r3, [r4, #0]
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d3fb      	bcc.n	80003e2 <clockwise_A+0x9e>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
 80003ea:	482f      	ldr	r0, [pc, #188]	; (80004a8 <clockwise_A+0x164>)
 80003ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f0:	f000 ff94 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80003f4:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80003f6:	6823      	ldr	r3, [r4, #0]
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d3fb      	bcc.n	80003f6 <clockwise_A+0xb2>
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
 80003fe:	482a      	ldr	r0, [pc, #168]	; (80004a8 <clockwise_A+0x164>)
 8000400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000404:	f000 ff8a 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000408:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800040a:	6823      	ldr	r3, [r4, #0]
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2b02      	cmp	r3, #2
 8000410:	d3fb      	bcc.n	800040a <clockwise_A+0xc6>
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
 8000412:	4825      	ldr	r0, [pc, #148]	; (80004a8 <clockwise_A+0x164>)
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	f000 ff7e 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800041c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800041e:	6823      	ldr	r3, [r4, #0]
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2b02      	cmp	r3, #2
 8000424:	d3fb      	bcc.n	800041e <clockwise_A+0xda>
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <clockwise_A+0x164>)
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	f000 ff76 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000430:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000432:	6823      	ldr	r3, [r4, #0]
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	2b02      	cmp	r3, #2
 8000438:	d3fb      	bcc.n	8000432 <clockwise_A+0xee>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
 800043a:	481b      	ldr	r0, [pc, #108]	; (80004a8 <clockwise_A+0x164>)
 800043c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000440:	f000 ff6a 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000444:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000446:	6823      	ldr	r3, [r4, #0]
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2b02      	cmp	r3, #2
 800044c:	d3fb      	bcc.n	8000446 <clockwise_A+0x102>
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
 800044e:	4816      	ldr	r0, [pc, #88]	; (80004a8 <clockwise_A+0x164>)
 8000450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000454:	f000 ff60 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000458:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	2b02      	cmp	r3, #2
 8000460:	d3fb      	bcc.n	800045a <clockwise_A+0x116>
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <clockwise_A+0x164>)
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	f000 ff58 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800046c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800046e:	6823      	ldr	r3, [r4, #0]
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	2b02      	cmp	r3, #2
 8000474:	d3fb      	bcc.n	800046e <clockwise_A+0x12a>
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <clockwise_A+0x164>)
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	f000 ff4e 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000480:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000482:	6823      	ldr	r3, [r4, #0]
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	2b02      	cmp	r3, #2
 8000488:	d3fb      	bcc.n	8000482 <clockwise_A+0x13e>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
 800048a:	4807      	ldr	r0, [pc, #28]	; (80004a8 <clockwise_A+0x164>)
 800048c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000490:	f000 ff42 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000494:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000496:	6823      	ldr	r3, [r4, #0]
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	2b02      	cmp	r3, #2
 800049c:	d3fb      	bcc.n	8000496 <clockwise_A+0x152>
*/
void clockwise_A(int n)
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
 800049e:	3601      	adds	r6, #1
 80004a0:	42be      	cmp	r6, r7
 80004a2:	f47f af5c 	bne.w	800035e <clockwise_A+0x1a>
 80004a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004a8:	40021800 	.word	0x40021800
 80004ac:	20000024 	.word	0x20000024

080004b0 <counterClockwise_A>:
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
    }
}
void counterClockwise_A(int n)
{
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
 80004b2:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
    }
}
void counterClockwise_A(int n)
{
 80004b6:	4607      	mov	r7, r0
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
 80004b8:	4856      	ldr	r0, [pc, #344]	; (8000614 <counterClockwise_A+0x164>)
 80004ba:	f000 ff2f 	bl	800131c <GPIO_ResetBits>
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
 80004be:	2f00      	cmp	r7, #0
 80004c0:	f340 80a7 	ble.w	8000612 <counterClockwise_A+0x162>
 80004c4:	4c54      	ldr	r4, [pc, #336]	; (8000618 <counterClockwise_A+0x168>)
 80004c6:	2600      	movs	r6, #0
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
 80004c8:	4625      	mov	r5, r4
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
 80004ca:	4852      	ldr	r0, [pc, #328]	; (8000614 <counterClockwise_A+0x164>)
 80004cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d0:	f000 ff22 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80004d4:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80004d6:	6823      	ldr	r3, [r4, #0]
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d3fb      	bcc.n	80004d6 <counterClockwise_A+0x26>
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
 80004de:	484d      	ldr	r0, [pc, #308]	; (8000614 <counterClockwise_A+0x164>)
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	f000 ff1a 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80004e8:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d3fb      	bcc.n	80004ea <counterClockwise_A+0x3a>
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
 80004f2:	4848      	ldr	r0, [pc, #288]	; (8000614 <counterClockwise_A+0x164>)
 80004f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f8:	f000 ff0e 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80004fc:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	1a9b      	subs	r3, r3, r2
 8000502:	2b02      	cmp	r3, #2
 8000504:	d3fb      	bcc.n	80004fe <counterClockwise_A+0x4e>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
 8000506:	4843      	ldr	r0, [pc, #268]	; (8000614 <counterClockwise_A+0x164>)
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	f000 ff06 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000510:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	2b02      	cmp	r3, #2
 8000518:	d3fb      	bcc.n	8000512 <counterClockwise_A+0x62>
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
 800051a:	483e      	ldr	r0, [pc, #248]	; (8000614 <counterClockwise_A+0x164>)
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	f000 fefc 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000524:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d3fb      	bcc.n	8000526 <counterClockwise_A+0x76>
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
 800052e:	4839      	ldr	r0, [pc, #228]	; (8000614 <counterClockwise_A+0x164>)
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	f000 fef0 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000538:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	2b02      	cmp	r3, #2
 8000540:	d3fb      	bcc.n	800053a <counterClockwise_A+0x8a>
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
 8000542:	4834      	ldr	r0, [pc, #208]	; (8000614 <counterClockwise_A+0x164>)
 8000544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000548:	f000 fee6 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800054c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	2b02      	cmp	r3, #2
 8000554:	d3fb      	bcc.n	800054e <counterClockwise_A+0x9e>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
 8000556:	482f      	ldr	r0, [pc, #188]	; (8000614 <counterClockwise_A+0x164>)
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	f000 fede 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000560:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	2b02      	cmp	r3, #2
 8000568:	d3fb      	bcc.n	8000562 <counterClockwise_A+0xb2>
        GPIO_SetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
 800056a:	482a      	ldr	r0, [pc, #168]	; (8000614 <counterClockwise_A+0x164>)
 800056c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000570:	f000 fed4 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000574:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	2b02      	cmp	r3, #2
 800057c:	d3fb      	bcc.n	8000576 <counterClockwise_A+0xc6>
        GPIO_ResetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
 800057e:	4825      	ldr	r0, [pc, #148]	; (8000614 <counterClockwise_A+0x164>)
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	f000 fec8 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000588:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2b02      	cmp	r3, #2
 8000590:	d3fb      	bcc.n	800058a <counterClockwise_A+0xda>
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
 8000592:	4820      	ldr	r0, [pc, #128]	; (8000614 <counterClockwise_A+0x164>)
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	f000 fec0 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800059c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d3fb      	bcc.n	800059e <counterClockwise_A+0xee>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
 80005a6:	481b      	ldr	r0, [pc, #108]	; (8000614 <counterClockwise_A+0x164>)
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	f000 feb4 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80005b0:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d3fb      	bcc.n	80005b2 <counterClockwise_A+0x102>
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <counterClockwise_A+0x164>)
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	f000 feaa 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80005c4:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d3fb      	bcc.n	80005c6 <counterClockwise_A+0x116>
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <counterClockwise_A+0x164>)
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	f000 fea2 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80005d8:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d3fb      	bcc.n	80005da <counterClockwise_A+0x12a>
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_14);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <counterClockwise_A+0x164>)
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	f000 fe98 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80005ec:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d3fb      	bcc.n	80005ee <counterClockwise_A+0x13e>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_13);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_10);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_9);
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <counterClockwise_A+0x164>)
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	f000 fe8c 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000600:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2b02      	cmp	r3, #2
 8000608:	d3fb      	bcc.n	8000602 <counterClockwise_A+0x152>
}
void counterClockwise_A(int n)
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_9 | GPIO_Pin_10 | \
                   GPIO_Pin_13 | GPIO_Pin_14);
    for(int i = 0; i < n; i++) {
 800060a:	3601      	adds	r6, #1
 800060c:	42be      	cmp	r6, r7
 800060e:	f47f af5c 	bne.w	80004ca <counterClockwise_A+0x1a>
 8000612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000614:	40021800 	.word	0x40021800
 8000618:	20000024 	.word	0x20000024

0800061c <clockwise_B>:
        
    }
}

void clockwise_B(int n)
{
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
 800061e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
        
    }
}

void clockwise_B(int n)
{
 8000622:	4607      	mov	r7, r0
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
 8000624:	4850      	ldr	r0, [pc, #320]	; (8000768 <clockwise_B+0x14c>)
 8000626:	f000 fe79 	bl	800131c <GPIO_ResetBits>
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
 800062a:	2f00      	cmp	r7, #0
 800062c:	f340 809b 	ble.w	8000766 <clockwise_B+0x14a>
 8000630:	4c4e      	ldr	r4, [pc, #312]	; (800076c <clockwise_B+0x150>)
 8000632:	2600      	movs	r6, #0
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
 8000634:	4625      	mov	r5, r4
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
 8000636:	484c      	ldr	r0, [pc, #304]	; (8000768 <clockwise_B+0x14c>)
 8000638:	2120      	movs	r1, #32
 800063a:	f000 fe6d 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800063e:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	2b02      	cmp	r3, #2
 8000646:	d3fb      	bcc.n	8000640 <clockwise_B+0x24>
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
 8000648:	4847      	ldr	r0, [pc, #284]	; (8000768 <clockwise_B+0x14c>)
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	f000 fe66 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000650:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	2b02      	cmp	r3, #2
 8000658:	d3fb      	bcc.n	8000652 <clockwise_B+0x36>
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
 800065a:	4843      	ldr	r0, [pc, #268]	; (8000768 <clockwise_B+0x14c>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	f000 fe5b 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000662:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	2b02      	cmp	r3, #2
 800066a:	d3fb      	bcc.n	8000664 <clockwise_B+0x48>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
 800066c:	483e      	ldr	r0, [pc, #248]	; (8000768 <clockwise_B+0x14c>)
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f000 fe53 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000676:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2b02      	cmp	r3, #2
 800067e:	d3fb      	bcc.n	8000678 <clockwise_B+0x5c>
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
 8000680:	4839      	ldr	r0, [pc, #228]	; (8000768 <clockwise_B+0x14c>)
 8000682:	2120      	movs	r1, #32
 8000684:	f000 fe4a 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000688:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2b02      	cmp	r3, #2
 8000690:	d3fb      	bcc.n	800068a <clockwise_B+0x6e>
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
 8000692:	4835      	ldr	r0, [pc, #212]	; (8000768 <clockwise_B+0x14c>)
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	f000 fe3f 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800069a:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d3fb      	bcc.n	800069c <clockwise_B+0x80>
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
 80006a4:	4830      	ldr	r0, [pc, #192]	; (8000768 <clockwise_B+0x14c>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	f000 fe36 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80006ac:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d3fb      	bcc.n	80006ae <clockwise_B+0x92>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <clockwise_B+0x14c>)
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	f000 fe2e 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80006c0:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d3fb      	bcc.n	80006c2 <clockwise_B+0xa6>
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
 80006ca:	4827      	ldr	r0, [pc, #156]	; (8000768 <clockwise_B+0x14c>)
 80006cc:	2120      	movs	r1, #32
 80006ce:	f000 fe25 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80006d2:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d3fb      	bcc.n	80006d4 <clockwise_B+0xb8>
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
 80006dc:	4822      	ldr	r0, [pc, #136]	; (8000768 <clockwise_B+0x14c>)
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	f000 fe1a 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80006e4:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d3fb      	bcc.n	80006e6 <clockwise_B+0xca>
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <clockwise_B+0x14c>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	f000 fe13 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80006f6:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d3fb      	bcc.n	80006f8 <clockwise_B+0xdc>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <clockwise_B+0x14c>)
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	f000 fe07 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800070a:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	2b02      	cmp	r3, #2
 8000712:	d3fb      	bcc.n	800070c <clockwise_B+0xf0>
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
 8000714:	4814      	ldr	r0, [pc, #80]	; (8000768 <clockwise_B+0x14c>)
 8000716:	2120      	movs	r1, #32
 8000718:	f000 fdfe 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800071c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800071e:	6823      	ldr	r3, [r4, #0]
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	2b02      	cmp	r3, #2
 8000724:	d3fb      	bcc.n	800071e <clockwise_B+0x102>
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <clockwise_B+0x14c>)
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	f000 fdf7 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800072e:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	2b02      	cmp	r3, #2
 8000736:	d3fb      	bcc.n	8000730 <clockwise_B+0x114>
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <clockwise_B+0x14c>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	f000 fdee 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000740:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	2b02      	cmp	r3, #2
 8000748:	d3fb      	bcc.n	8000742 <clockwise_B+0x126>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <clockwise_B+0x14c>)
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	f000 fde2 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000754:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	2b02      	cmp	r3, #2
 800075c:	d3fb      	bcc.n	8000756 <clockwise_B+0x13a>

void clockwise_B(int n)
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
 800075e:	3601      	adds	r6, #1
 8000760:	42be      	cmp	r6, r7
 8000762:	f47f af68 	bne.w	8000636 <clockwise_B+0x1a>
 8000766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000768:	40021800 	.word	0x40021800
 800076c:	20000024 	.word	0x20000024

08000770 <counterClockwise_B>:
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
    }
}
void counterClockwise_B(int n)
{
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
 8000772:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
    }
}
void counterClockwise_B(int n)
{
 8000776:	4607      	mov	r7, r0
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
 8000778:	4850      	ldr	r0, [pc, #320]	; (80008bc <counterClockwise_B+0x14c>)
 800077a:	f000 fdcf 	bl	800131c <GPIO_ResetBits>
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
 800077e:	2f00      	cmp	r7, #0
 8000780:	f340 809b 	ble.w	80008ba <counterClockwise_B+0x14a>
 8000784:	4c4e      	ldr	r4, [pc, #312]	; (80008c0 <counterClockwise_B+0x150>)
 8000786:	2600      	movs	r6, #0
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
  while ((msTicks - curTicks) < dlyTicks);
 8000788:	4625      	mov	r5, r4
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
 800078a:	484c      	ldr	r0, [pc, #304]	; (80008bc <counterClockwise_B+0x14c>)
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	f000 fdc2 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000794:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2b02      	cmp	r3, #2
 800079c:	d3fb      	bcc.n	8000796 <counterClockwise_B+0x26>
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
 800079e:	4847      	ldr	r0, [pc, #284]	; (80008bc <counterClockwise_B+0x14c>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	f000 fdbb 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80007a6:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d3fb      	bcc.n	80007a8 <counterClockwise_B+0x38>
        //step1
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
 80007b0:	4842      	ldr	r0, [pc, #264]	; (80008bc <counterClockwise_B+0x14c>)
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	f000 fdb0 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80007b8:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d3fb      	bcc.n	80007ba <counterClockwise_B+0x4a>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
 80007c2:	483e      	ldr	r0, [pc, #248]	; (80008bc <counterClockwise_B+0x14c>)
 80007c4:	2120      	movs	r1, #32
 80007c6:	f000 fda9 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80007ca:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d3fb      	bcc.n	80007cc <counterClockwise_B+0x5c>
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
 80007d4:	4839      	ldr	r0, [pc, #228]	; (80008bc <counterClockwise_B+0x14c>)
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	f000 fd9f 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80007de:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d3fb      	bcc.n	80007e0 <counterClockwise_B+0x70>
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
 80007e8:	4834      	ldr	r0, [pc, #208]	; (80008bc <counterClockwise_B+0x14c>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	f000 fd94 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80007f0:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d3fb      	bcc.n	80007f2 <counterClockwise_B+0x82>
        //step2
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
 80007fa:	4830      	ldr	r0, [pc, #192]	; (80008bc <counterClockwise_B+0x14c>)
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	f000 fd8b 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000802:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	2b02      	cmp	r3, #2
 800080a:	d3fb      	bcc.n	8000804 <counterClockwise_B+0x94>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
 800080c:	482b      	ldr	r0, [pc, #172]	; (80008bc <counterClockwise_B+0x14c>)
 800080e:	2120      	movs	r1, #32
 8000810:	f000 fd84 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000814:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	2b02      	cmp	r3, #2
 800081c:	d3fb      	bcc.n	8000816 <counterClockwise_B+0xa6>
        GPIO_SetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
 800081e:	4827      	ldr	r0, [pc, #156]	; (80008bc <counterClockwise_B+0x14c>)
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	f000 fd7a 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000828:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	2b02      	cmp	r3, #2
 8000830:	d3fb      	bcc.n	800082a <counterClockwise_B+0xba>
        GPIO_ResetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
 8000832:	4822      	ldr	r0, [pc, #136]	; (80008bc <counterClockwise_B+0x14c>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	f000 fd6f 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800083a:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	2b02      	cmp	r3, #2
 8000842:	d3fb      	bcc.n	800083c <counterClockwise_B+0xcc>
        //step3
        GPIO_ResetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
 8000844:	481d      	ldr	r0, [pc, #116]	; (80008bc <counterClockwise_B+0x14c>)
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	f000 fd68 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800084c:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	2b02      	cmp	r3, #2
 8000854:	d3fb      	bcc.n	800084e <counterClockwise_B+0xde>
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <counterClockwise_B+0x14c>)
 8000858:	2120      	movs	r1, #32
 800085a:	f000 fd5d 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800085e:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	2b02      	cmp	r3, #2
 8000866:	d3fb      	bcc.n	8000860 <counterClockwise_B+0xf0>
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <counterClockwise_B+0x14c>)
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	f000 fd53 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000872:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	2b02      	cmp	r3, #2
 800087a:	d3fb      	bcc.n	8000874 <counterClockwise_B+0x104>
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
        Delay(PHASE_DELAY);
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <counterClockwise_B+0x14c>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	f000 fd4c 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000884:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	2b02      	cmp	r3, #2
 800088c:	d3fb      	bcc.n	8000886 <counterClockwise_B+0x116>
        //step4
        GPIO_SetBits(GPIOG, GPIO_Pin_8);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <counterClockwise_B+0x14c>)
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	f000 fd43 	bl	800131c <GPIO_ResetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000896:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	2b02      	cmp	r3, #2
 800089e:	d3fb      	bcc.n	8000898 <counterClockwise_B+0x128>
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_7);
        Delay(PHASE_DELAY);
        GPIO_ResetBits(GPIOG, GPIO_Pin_6);
        Delay(PHASE_DELAY);
        GPIO_SetBits(GPIOG, GPIO_Pin_5);
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <counterClockwise_B+0x14c>)
 80008a2:	2120      	movs	r1, #32
 80008a4:	f000 fd38 	bl	8001318 <GPIO_SetBits>
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80008a8:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d3fb      	bcc.n	80008aa <counterClockwise_B+0x13a>
}
void counterClockwise_B(int n)
{
    GPIO_ResetBits(GPIOG, GPIO_Pin_5 | GPIO_Pin_6 | \
                   GPIO_Pin_7 | GPIO_Pin_8);
    for(int i = 0; i < n; i++) {
 80008b2:	3601      	adds	r6, #1
 80008b4:	42be      	cmp	r6, r7
 80008b6:	f47f af68 	bne.w	800078a <counterClockwise_B+0x1a>
 80008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008bc:	40021800 	.word	0x40021800
 80008c0:	20000024 	.word	0x20000024

080008c4 <pad_init>:
        Delay(PHASE_DELAY);
        
    }
}

void pad_init(){
 80008c4:	b508      	push	{r3, lr}
    clockwise_B(65);
 80008c6:	2041      	movs	r0, #65	; 0x41
 80008c8:	f7ff fea8 	bl	800061c <clockwise_B>
    clockwise_A(65);
 80008cc:	2041      	movs	r0, #65	; 0x41
}
 80008ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
}

void pad_init(){
    clockwise_B(65);
    clockwise_A(65);
 80008d2:	f7ff bd37 	b.w	8000344 <clockwise_A>
 80008d6:	bf00      	nop

080008d8 <pen_up>:
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <pen_up+0x18>)
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80008da:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <pen_up+0x1c>)
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 80008dc:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80008e0:	6359      	str	r1, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80008e2:	6811      	ldr	r1, [r2, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	1a5b      	subs	r3, r3, r1
 80008e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ec:	d3fa      	bcc.n	80008e4 <pen_up+0xc>
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
    Delay(500);
}
 80008ee:	4770      	bx	lr
 80008f0:	40000800 	.word	0x40000800
 80008f4:	20000024 	.word	0x20000024

080008f8 <pen_down>:

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <pen_down+0x18>)
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <pen_down+0x1c>)
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
    Delay(500);
}

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
 80008fc:	f44f 7161 	mov.w	r1, #900	; 0x384
 8000900:	6359      	str	r1, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000902:	6811      	ldr	r1, [r2, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000904:	6813      	ldr	r3, [r2, #0]
 8000906:	1a5b      	subs	r3, r3, r1
 8000908:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800090c:	d3fa      	bcc.n	8000904 <pen_down+0xc>
}

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
    Delay(2000);
}
 800090e:	4770      	bx	lr
 8000910:	40000800 	.word	0x40000800
 8000914:	20000024 	.word	0x20000024

08000918 <H>:

//Write H
void H(){
 8000918:	b538      	push	{r3, r4, r5, lr}
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <H+0xc8>)
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800091c:	4c31      	ldr	r4, [pc, #196]	; (80009e4 <H+0xcc>)
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 800091e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000924:	6822      	ldr	r2, [r4, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	4d2e      	ldr	r5, [pc, #184]	; (80009e4 <H+0xcc>)
 800092a:	1a9b      	subs	r3, r3, r2
 800092c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000930:	d3f9      	bcc.n	8000926 <H+0xe>
}

//Write H
void H(){
    pen_up();
    counterClockwise_B(20);
 8000932:	2014      	movs	r0, #20
 8000934:	f7ff ff1c 	bl	8000770 <counterClockwise_B>
    clockwise_A(20);
 8000938:	2014      	movs	r0, #20
 800093a:	f7ff fd03 	bl	8000344 <clockwise_A>
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
    Delay(500);
}

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <H+0xc8>)
 8000940:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000946:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	4d26      	ldr	r5, [pc, #152]	; (80009e4 <H+0xcc>)
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000952:	d3f9      	bcc.n	8000948 <H+0x30>
void H(){
    pen_up();
    counterClockwise_B(20);
    clockwise_A(20);
    pen_down();
    clockwise_A(30);
 8000954:	201e      	movs	r0, #30
 8000956:	f7ff fcf5 	bl	8000344 <clockwise_A>
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <H+0xc8>)
 800095c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 8000962:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	4d1f      	ldr	r5, [pc, #124]	; (80009e4 <H+0xcc>)
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800096e:	d3f9      	bcc.n	8000964 <H+0x4c>
    counterClockwise_B(20);
    clockwise_A(20);
    pen_down();
    clockwise_A(30);
    pen_up();
    counterClockwise_A(15);
 8000970:	200f      	movs	r0, #15
 8000972:	f7ff fd9d 	bl	80004b0 <counterClockwise_A>
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
    Delay(500);
}

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <H+0xc8>)
 8000978:	f44f 7261 	mov.w	r2, #900	; 0x384
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800097e:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	4d18      	ldr	r5, [pc, #96]	; (80009e4 <H+0xcc>)
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800098a:	d3f9      	bcc.n	8000980 <H+0x68>
    pen_down();
    clockwise_A(30);
    pen_up();
    counterClockwise_A(15);
    pen_down();
    counterClockwise_B(15);
 800098c:	200f      	movs	r0, #15
 800098e:	f7ff feef 	bl	8000770 <counterClockwise_B>
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <H+0xc8>)
 8000994:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 800099a:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	4d11      	ldr	r5, [pc, #68]	; (80009e4 <H+0xcc>)
 80009a0:	1a9b      	subs	r3, r3, r2
 80009a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009a6:	d3f9      	bcc.n	800099c <H+0x84>
    pen_up();
    counterClockwise_A(15);
    pen_down();
    counterClockwise_B(15);
    pen_up();
    counterClockwise_A(15);
 80009a8:	200f      	movs	r0, #15
 80009aa:	f7ff fd81 	bl	80004b0 <counterClockwise_A>
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
    Delay(500);
}

void pen_down(){
    TIM4->CCR1 = 900;      // 1500 == 1.5 ms -> 90'
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <H+0xc8>)
 80009b0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80009b6:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	4d0a      	ldr	r5, [pc, #40]	; (80009e4 <H+0xcc>)
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009c2:	d3f9      	bcc.n	80009b8 <H+0xa0>
    pen_down();
    counterClockwise_B(15);
    pen_up();
    counterClockwise_A(15);
    pen_down();
    clockwise_A(30);
 80009c4:	201e      	movs	r0, #30
 80009c6:	f7ff fcbd 	bl	8000344 <clockwise_A>
    clockwise_B(65);
    clockwise_A(65);
}

void pen_up(){
    TIM4->CCR1 = 1700;       // 600 == 0.6 ms  -> 0'   
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <H+0xc8>)
 80009cc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
	msTicks++;
}

//  Delays number of Systicks (happens every 1 ms)
static void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = msTicks;
 80009d2:	682a      	ldr	r2, [r5, #0]
  while ((msTicks - curTicks) < dlyTicks);
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009dc:	d3fa      	bcc.n	80009d4 <H+0xbc>
    pen_up();
    counterClockwise_A(15);
    pen_down();
    clockwise_A(30);
    pen_up();
}
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	40000800 	.word	0x40000800
 80009e4:	20000024 	.word	0x20000024

080009e8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void NMI_Handler(void)
{
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void HardFault_Handler(void)
{
 80009ec:	e7fe      	b.n	80009ec <HardFault_Handler>
 80009ee:	bf00      	nop
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void MemManage_Handler(void)
{
 80009f0:	e7fe      	b.n	80009f0 <HardFault_Handler+0x4>
 80009f2:	bf00      	nop
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void BusFault_Handler(void)
{
 80009f4:	e7fe      	b.n	80009f4 <HardFault_Handler+0x8>
 80009f6:	bf00      	nop
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void UsageFault_Handler(void)
{
 80009f8:	e7fe      	b.n	80009f8 <HardFault_Handler+0xc>
 80009fa:	bf00      	nop
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SVC_Handler(void)
{
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void DebugMon_Handler(void)
{
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void PendSV_Handler(void)
{
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SysTick_Handler(void)
{
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <SystemInit+0xd8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a0e:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <SystemInit+0xdc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a10:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a12:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a14:	f041 0101 	orr.w	r1, r1, #1
 8000a18:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a1a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000a22:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000a26:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a28:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a2a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a2e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000a32:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a34:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a40:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a42:	461a      	mov	r2, r3
 8000a44:	e003      	b.n	8000a4e <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a46:	9b00      	ldr	r3, [sp, #0]
 8000a48:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000a4c:	d009      	beq.n	8000a62 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000a56:	9b00      	ldr	r3, [sp, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a5c:	9b01      	ldr	r3, [sp, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f1      	beq.n	8000a46 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemInit+0xd8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000a6a:	bf18      	it	ne
 8000a6c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a6e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d005      	beq.n	8000a82 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <SystemInit+0xe0>)
 8000a78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a7e:	b002      	add	sp, #8
 8000a80:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <SystemInit+0xd8>)
    PWR->CR |= PWR_CR_VOS;
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <SystemInit+0xe4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a86:	6c18      	ldr	r0, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a88:	491a      	ldr	r1, [pc, #104]	; (8000af4 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a8a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000a8e:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000a90:	6810      	ldr	r0, [r2, #0]
 8000a92:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000a96:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000aa2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000aaa:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000aac:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	680b      	ldr	r3, [r1, #0]
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SystemInit+0xd8>)
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	d5fb      	bpl.n	8000ab8 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <SystemInit+0xec>)
 8000ac2:	f240 7105 	movw	r1, #1797	; 0x705
 8000ac6:	6019      	str	r1, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ac8:	6893      	ldr	r3, [r2, #8]
 8000aca:	f023 0303 	bic.w	r3, r3, #3
 8000ace:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ad0:	6893      	ldr	r3, [r2, #8]
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ad8:	6893      	ldr	r3, [r2, #8]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d1fa      	bne.n	8000ad8 <SystemInit+0xcc>
 8000ae2:	e7c8      	b.n	8000a76 <SystemInit+0x6a>
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	24003010 	.word	0x24003010
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	40007000 	.word	0x40007000
 8000af4:	07405408 	.word	0x07405408
 8000af8:	40023c00 	.word	0x40023c00

08000afc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <SystemCoreClockUpdate+0x58>)
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000b04:	2a04      	cmp	r2, #4
 8000b06:	d023      	beq.n	8000b50 <SystemCoreClockUpdate+0x54>
 8000b08:	2a08      	cmp	r2, #8
 8000b0a:	d009      	beq.n	8000b20 <SystemCoreClockUpdate+0x24>
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <SystemCoreClockUpdate+0x58>)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <SystemCoreClockUpdate+0x60>)
 8000b12:	6889      	ldr	r1, [r1, #8]
 8000b14:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000b18:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b20:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b22:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b24:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000b26:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b28:	bf4c      	ite	mi
 8000b2a:	4a0d      	ldrmi	r2, [pc, #52]	; (8000b60 <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b2c:	4a0a      	ldrpl	r2, [pc, #40]	; (8000b58 <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b32:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000b36:	fbb2 f2f1 	udiv	r2, r2, r1
 8000b3a:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SystemCoreClockUpdate+0x58>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b46:	3301      	adds	r3, #1
 8000b48:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8000b4a:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 8000b4e:	e7de      	b.n	8000b0e <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <SystemCoreClockUpdate+0x64>)
 8000b52:	e7dc      	b.n	8000b0e <SystemCoreClockUpdate+0x12>
 8000b54:	40023800 	.word	0x40023800
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	007a1200 	.word	0x007a1200

08000b64 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000b66:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b68:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b6a:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b6c:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000b70:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b72:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000b76:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b78:	4d0c      	ldr	r5, [pc, #48]	; (8000bac <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000b7a:	4c0d      	ldr	r4, [pc, #52]	; (8000bb0 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000b7c:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000b80:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000b84:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b86:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000b88:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000b8c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000b96:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8000b98:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b9a:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	24003000 	.word	0x24003000
 8000bac:	24003010 	.word	0x24003010
 8000bb0:	20003000 	.word	0x20003000

08000bb4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <RCC_HSEConfig+0xc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000bba:	7018      	strb	r0, [r3, #0]
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023802 	.word	0x40023802

08000bc4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000bc4:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8000bc6:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000bca:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000bcc:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000bce:	039b      	lsls	r3, r3, #14
 8000bd0:	d40c      	bmi.n	8000bec <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000bd2:	9b01      	ldr	r3, [sp, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000bd8:	9b01      	ldr	r3, [sp, #4]
 8000bda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000bde:	d1f5      	bne.n	8000bcc <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <RCC_WaitForHSEStartUp+0x34>)
 8000be2:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000be4:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000be8:	b002      	add	sp, #8
 8000bea:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000bec:	9b01      	ldr	r3, [sp, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000bf2:	9b01      	ldr	r3, [sp, #4]
 8000bf4:	e7f4      	b.n	8000be0 <RCC_WaitForHSEStartUp+0x1c>
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <RCC_AdjustHSICalibrationValue+0x10>)
 8000bfe:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000c00:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000c04:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000c08:	6018      	str	r0, [r3, #0]
 8000c0a:	4770      	bx	lr
 8000c0c:	40023800 	.word	0x40023800

08000c10 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <RCC_HSICmd+0x8>)
 8000c12:	6018      	str	r0, [r3, #0]
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	42470000 	.word	0x42470000

08000c1c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <RCC_LSEConfig+0x1c>)
 8000c1e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000c20:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c22:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000c24:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000c26:	d005      	beq.n	8000c34 <RCC_LSEConfig+0x18>
 8000c28:	2804      	cmp	r0, #4
 8000c2a:	d102      	bne.n	8000c32 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	4770      	bx	lr
 8000c32:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000c34:	7018      	strb	r0, [r3, #0]
      break;
 8000c36:	4770      	bx	lr
 8000c38:	40023870 	.word	0x40023870

08000c3c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000c3c:	4b01      	ldr	r3, [pc, #4]	; (8000c44 <RCC_LSICmd+0x8>)
 8000c3e:	6018      	str	r0, [r3, #0]
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	42470e80 	.word	0x42470e80

08000c48 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000c48:	b430      	push	{r4, r5}
 8000c4a:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000c4c:	4d06      	ldr	r5, [pc, #24]	; (8000c68 <RCC_PLLConfig+0x20>)
 8000c4e:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	4301      	orrs	r1, r0
 8000c56:	3b01      	subs	r3, #1
 8000c58:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000c5c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000c60:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 8000c62:	bc30      	pop	{r4, r5}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <RCC_PLLCmd+0x8>)
 8000c6e:	6018      	str	r0, [r3, #0]
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	42470060 	.word	0x42470060

08000c78 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000c78:	0709      	lsls	r1, r1, #28
 8000c7a:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <RCC_PLLI2SConfig+0x10>)
 8000c7c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000c80:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000c8c:	4b01      	ldr	r3, [pc, #4]	; (8000c94 <RCC_PLLI2SCmd+0x8>)
 8000c8e:	6018      	str	r0, [r3, #0]
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	42470068 	.word	0x42470068

08000c98 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000c98:	0712      	lsls	r2, r2, #28
 8000c9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000c9e:	4b03      	ldr	r3, [pc, #12]	; (8000cac <RCC_PLLSAIConfig+0x14>)
 8000ca0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000ca4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <RCC_PLLSAICmd+0x8>)
 8000cb2:	6018      	str	r0, [r3, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	42470070 	.word	0x42470070

08000cbc <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <RCC_ClockSecuritySystemCmd+0x8>)
 8000cbe:	6018      	str	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	4247004c 	.word	0x4247004c

08000cc8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <RCC_MCO1Config+0x10>)
 8000cca:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000ccc:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000cd0:	4311      	orrs	r1, r2
 8000cd2:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000cd4:	6098      	str	r0, [r3, #8]
 8000cd6:	4770      	bx	lr
 8000cd8:	40023800 	.word	0x40023800

08000cdc <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <RCC_MCO2Config+0x10>)
 8000cde:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000ce0:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000ce4:	4311      	orrs	r1, r2
 8000ce6:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000ce8:	6098      	str	r0, [r3, #8]
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800

08000cf0 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <RCC_SYSCLKConfig+0x10>)
 8000cf2:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000cf4:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000cf8:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cfa:	6098      	str	r0, [r3, #8]
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <RCC_GetSYSCLKSource+0xc>)
 8000d06:	6898      	ldr	r0, [r3, #8]
}
 8000d08:	f000 000c 	and.w	r0, r0, #12
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <RCC_HCLKConfig+0x10>)
 8000d16:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000d18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000d1c:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d1e:	6098      	str	r0, [r3, #8]
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <RCC_PCLK1Config+0x10>)
 8000d2a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000d2c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000d30:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d32:	6098      	str	r0, [r3, #8]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <RCC_PCLK2Config+0x10>)
 8000d3e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000d40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000d44:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d48:	6098      	str	r0, [r3, #8]
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800

08000d50 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <RCC_GetClocksFreq+0x80>)
 8000d52:	6893      	ldr	r3, [r2, #8]
 8000d54:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000d58:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d5a:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000d5c:	d01b      	beq.n	8000d96 <RCC_GetClocksFreq+0x46>
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d01c      	beq.n	8000d9c <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <RCC_GetClocksFreq+0x84>)
 8000d64:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000d66:	491a      	ldr	r1, [pc, #104]	; (8000dd0 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000d6a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 8000d6c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000d70:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d72:	40e3      	lsrs	r3, r4
 8000d74:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000d76:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8000d78:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000d7c:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d7e:	fa23 f404 	lsr.w	r4, r3, r4
 8000d82:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d84:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000d86:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000d8a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000d8e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	60c3      	str	r3, [r0, #12]
}
 8000d94:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <RCC_GetClocksFreq+0x8c>)
 8000d98:	6003      	str	r3, [r0, #0]
      break;
 8000d9a:	e7e4      	b.n	8000d66 <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d9c:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d9e:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000da0:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000da2:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000da4:	bf4c      	ite	mi
 8000da6:	4b0d      	ldrmi	r3, [pc, #52]	; (8000ddc <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000da8:	4b0a      	ldrpl	r3, [pc, #40]	; (8000dd4 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000daa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dae:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <RCC_GetClocksFreq+0x80>)
 8000dbc:	6852      	ldr	r2, [r2, #4]
 8000dbe:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dca:	6003      	str	r3, [r0, #0]
      break;
 8000dcc:	e7cb      	b.n	8000d66 <RCC_GetClocksFreq+0x16>
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	00f42400 	.word	0x00f42400
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	007a1200 	.word	0x007a1200

08000de0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000de0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000de8:	d109      	bne.n	8000dfe <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <RCC_RTCCLKConfig+0x2c>)
 8000dec:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000dee:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000df2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dfa:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000dfc:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <RCC_RTCCLKConfig+0x2c>)
 8000e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e02:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000e06:	4310      	orrs	r0, r2
 8000e08:	6718      	str	r0, [r3, #112]	; 0x70
 8000e0a:	4770      	bx	lr
 8000e0c:	40023800 	.word	0x40023800

08000e10 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <RCC_RTCCLKCmd+0x8>)
 8000e12:	6018      	str	r0, [r3, #0]
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	42470e3c 	.word	0x42470e3c

08000e1c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000e1c:	4b01      	ldr	r3, [pc, #4]	; (8000e24 <RCC_BackupResetCmd+0x8>)
 8000e1e:	6018      	str	r0, [r3, #0]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	42470e40 	.word	0x42470e40

08000e28 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <RCC_I2SCLKConfig+0x8>)
 8000e2a:	6018      	str	r0, [r3, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	4247015c 	.word	0x4247015c

08000e34 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000e36:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000e3a:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000e3c:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000e40:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000e46:	4770      	bx	lr
 8000e48:	40023800 	.word	0x40023800

08000e4c <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000e4e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000e52:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000e54:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000e58:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <RCC_SAIBlockACLKConfig+0x14>)
 8000e6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000e6e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000e72:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000e74:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <RCC_SAIBlockBCLKConfig+0x14>)
 8000e82:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000e86:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000e8a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000e8c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <RCC_LTDCCLKDivConfig+0x14>)
 8000e9a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000e9e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000ea2:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000ea4:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <RCC_TIMCLKPresConfig+0x8>)
 8000eb2:	6018      	str	r0, [r3, #0]
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	424711e0 	.word	0x424711e0

08000ebc <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <RCC_AHB1PeriphClockCmd+0x14>)
 8000ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec0:	b919      	cbnz	r1, 8000eca <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ec2:	ea22 0000 	bic.w	r0, r2, r0
 8000ec6:	6318      	str	r0, [r3, #48]	; 0x30
 8000ec8:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000eca:	4310      	orrs	r0, r2
 8000ecc:	6318      	str	r0, [r3, #48]	; 0x30
 8000ece:	4770      	bx	lr
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <RCC_AHB2PeriphClockCmd+0x14>)
 8000ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ed8:	b919      	cbnz	r1, 8000ee2 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000eda:	ea22 0000 	bic.w	r0, r2, r0
 8000ede:	6358      	str	r0, [r3, #52]	; 0x34
 8000ee0:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000ee2:	4310      	orrs	r0, r2
 8000ee4:	6358      	str	r0, [r3, #52]	; 0x34
 8000ee6:	4770      	bx	lr
 8000ee8:	40023800 	.word	0x40023800

08000eec <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <RCC_AHB3PeriphClockCmd+0x14>)
 8000eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ef0:	b919      	cbnz	r1, 8000efa <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000ef2:	ea22 0000 	bic.w	r0, r2, r0
 8000ef6:	6398      	str	r0, [r3, #56]	; 0x38
 8000ef8:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000efa:	4310      	orrs	r0, r2
 8000efc:	6398      	str	r0, [r3, #56]	; 0x38
 8000efe:	4770      	bx	lr
 8000f00:	40023800 	.word	0x40023800

08000f04 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <RCC_APB1PeriphClockCmd+0x14>)
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f08:	b919      	cbnz	r1, 8000f12 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f0a:	ea22 0000 	bic.w	r0, r2, r0
 8000f0e:	6418      	str	r0, [r3, #64]	; 0x40
 8000f10:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f12:	4310      	orrs	r0, r2
 8000f14:	6418      	str	r0, [r3, #64]	; 0x40
 8000f16:	4770      	bx	lr
 8000f18:	40023800 	.word	0x40023800

08000f1c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <RCC_APB2PeriphClockCmd+0x14>)
 8000f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f20:	b919      	cbnz	r1, 8000f2a <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f22:	ea22 0000 	bic.w	r0, r2, r0
 8000f26:	6458      	str	r0, [r3, #68]	; 0x44
 8000f28:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f2a:	4310      	orrs	r0, r2
 8000f2c:	6458      	str	r0, [r3, #68]	; 0x44
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800

08000f34 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <RCC_AHB1PeriphResetCmd+0x14>)
 8000f36:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f38:	b919      	cbnz	r1, 8000f42 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000f3a:	ea22 0000 	bic.w	r0, r2, r0
 8000f3e:	6118      	str	r0, [r3, #16]
 8000f40:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000f42:	4310      	orrs	r0, r2
 8000f44:	6118      	str	r0, [r3, #16]
 8000f46:	4770      	bx	lr
 8000f48:	40023800 	.word	0x40023800

08000f4c <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <RCC_AHB2PeriphResetCmd+0x14>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f50:	b919      	cbnz	r1, 8000f5a <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000f52:	ea22 0000 	bic.w	r0, r2, r0
 8000f56:	6158      	str	r0, [r3, #20]
 8000f58:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000f5a:	4310      	orrs	r0, r2
 8000f5c:	6158      	str	r0, [r3, #20]
 8000f5e:	4770      	bx	lr
 8000f60:	40023800 	.word	0x40023800

08000f64 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <RCC_AHB3PeriphResetCmd+0x14>)
 8000f66:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f68:	b919      	cbnz	r1, 8000f72 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000f6a:	ea22 0000 	bic.w	r0, r2, r0
 8000f6e:	6198      	str	r0, [r3, #24]
 8000f70:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000f72:	4310      	orrs	r0, r2
 8000f74:	6198      	str	r0, [r3, #24]
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800

08000f7c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <RCC_APB1PeriphResetCmd+0x14>)
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f80:	b919      	cbnz	r1, 8000f8a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f82:	ea22 0000 	bic.w	r0, r2, r0
 8000f86:	6218      	str	r0, [r3, #32]
 8000f88:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f8a:	4310      	orrs	r0, r2
 8000f8c:	6218      	str	r0, [r3, #32]
 8000f8e:	4770      	bx	lr
 8000f90:	40023800 	.word	0x40023800

08000f94 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <RCC_APB2PeriphResetCmd+0x14>)
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f98:	b919      	cbnz	r1, 8000fa2 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f9a:	ea22 0000 	bic.w	r0, r2, r0
 8000f9e:	6258      	str	r0, [r3, #36]	; 0x24
 8000fa0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000fa2:	4310      	orrs	r0, r2
 8000fa4:	6258      	str	r0, [r3, #36]	; 0x24
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800

08000fac <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fb0:	b919      	cbnz	r1, 8000fba <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000fb2:	ea22 0000 	bic.w	r0, r2, r0
 8000fb6:	6518      	str	r0, [r3, #80]	; 0x50
 8000fb8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000fba:	4310      	orrs	r0, r2
 8000fbc:	6518      	str	r0, [r3, #80]	; 0x50
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 8000fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fc8:	b919      	cbnz	r1, 8000fd2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000fca:	ea22 0000 	bic.w	r0, r2, r0
 8000fce:	6558      	str	r0, [r3, #84]	; 0x54
 8000fd0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000fd2:	4310      	orrs	r0, r2
 8000fd4:	6558      	str	r0, [r3, #84]	; 0x54
 8000fd6:	4770      	bx	lr
 8000fd8:	40023800 	.word	0x40023800

08000fdc <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8000fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fe0:	b919      	cbnz	r1, 8000fea <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000fe2:	ea22 0000 	bic.w	r0, r2, r0
 8000fe6:	6598      	str	r0, [r3, #88]	; 0x58
 8000fe8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000fea:	4310      	orrs	r0, r2
 8000fec:	6598      	str	r0, [r3, #88]	; 0x58
 8000fee:	4770      	bx	lr
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ff8:	b919      	cbnz	r1, 8001002 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000ffa:	ea22 0000 	bic.w	r0, r2, r0
 8000ffe:	6618      	str	r0, [r3, #96]	; 0x60
 8001000:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001002:	4310      	orrs	r0, r2
 8001004:	6618      	str	r0, [r3, #96]	; 0x60
 8001006:	4770      	bx	lr
 8001008:	40023800 	.word	0x40023800

0800100c <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 800100e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001010:	b919      	cbnz	r1, 800101a <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001012:	ea22 0000 	bic.w	r0, r2, r0
 8001016:	6658      	str	r0, [r3, #100]	; 0x64
 8001018:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800101a:	4310      	orrs	r0, r2
 800101c:	6658      	str	r0, [r3, #100]	; 0x64
 800101e:	4770      	bx	lr
 8001020:	40023800 	.word	0x40023800

08001024 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <RCC_ITConfig+0x14>)
 8001026:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001028:	b919      	cbnz	r1, 8001032 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800102a:	ea22 0000 	bic.w	r0, r2, r0
 800102e:	7018      	strb	r0, [r3, #0]
 8001030:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001032:	4310      	orrs	r0, r2
 8001034:	7018      	strb	r0, [r3, #0]
 8001036:	4770      	bx	lr
 8001038:	4002380d 	.word	0x4002380d

0800103c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800103c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800103e:	2b01      	cmp	r3, #1
 8001040:	d00b      	beq.n	800105a <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001042:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <RCC_GetFlagStatus+0x30>)
 8001046:	bf0c      	ite	eq
 8001048:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800104a:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800104c:	f000 001f 	and.w	r0, r0, #31
 8001050:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001054:	f000 0001 	and.w	r0, r0, #1
 8001058:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <RCC_GetFlagStatus+0x30>)
 800105c:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800105e:	f000 001f 	and.w	r0, r0, #31
 8001062:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001066:	f000 0001 	and.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	40023800 	.word	0x40023800

08001070 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <RCC_ClearFlag+0xc>)
 8001072:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001074:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001078:	675a      	str	r2, [r3, #116]	; 0x74
 800107a:	4770      	bx	lr
 800107c:	40023800 	.word	0x40023800

08001080 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <RCC_GetITStatus+0x10>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001086:	bf0c      	ite	eq
 8001088:	2000      	moveq	r0, #0
 800108a:	2001      	movne	r0, #1
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001094:	4b01      	ldr	r3, [pc, #4]	; (800109c <RCC_ClearITPendingBit+0x8>)
 8001096:	7018      	strb	r0, [r3, #0]
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	4002380e 	.word	0x4002380e

080010a0 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80010a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <GPIO_DeInit+0x130>)
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d02a      	beq.n	80010fe <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <GPIO_DeInit+0x134>)
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d031      	beq.n	8001112 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <GPIO_DeInit+0x138>)
 80010b0:	4298      	cmp	r0, r3
 80010b2:	d038      	beq.n	8001126 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 80010b4:	4b49      	ldr	r3, [pc, #292]	; (80011dc <GPIO_DeInit+0x13c>)
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d03f      	beq.n	800113a <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <GPIO_DeInit+0x140>)
 80010bc:	4298      	cmp	r0, r3
 80010be:	d046      	beq.n	800114e <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 80010c0:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <GPIO_DeInit+0x144>)
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d04d      	beq.n	8001162 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <GPIO_DeInit+0x148>)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	d054      	beq.n	8001176 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <GPIO_DeInit+0x14c>)
 80010ce:	4298      	cmp	r0, r3
 80010d0:	d05b      	beq.n	800118a <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <GPIO_DeInit+0x150>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d062      	beq.n	800119e <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 80010d8:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <GPIO_DeInit+0x154>)
 80010da:	4298      	cmp	r0, r3
 80010dc:	d06b      	beq.n	80011b6 <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <GPIO_DeInit+0x158>)
 80010e0:	4298      	cmp	r0, r3
 80010e2:	d000      	beq.n	80010e6 <GPIO_DeInit+0x46>
 80010e4:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 80010e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010ea:	2101      	movs	r1, #1
 80010ec:	f7ff ff22 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80010f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010f4:	2100      	movs	r1, #0
    }
  }
}
 80010f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80010fa:	f7ff bf1b 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80010fe:	2001      	movs	r0, #1
 8001100:	4601      	mov	r1, r0
 8001102:	f7ff ff17 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001106:	2001      	movs	r0, #1
 8001108:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800110a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800110e:	f7ff bf11 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001112:	2002      	movs	r0, #2
 8001114:	2101      	movs	r1, #1
 8001116:	f7ff ff0d 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800111a:	2002      	movs	r0, #2
 800111c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800111e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001122:	f7ff bf07 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001126:	2004      	movs	r0, #4
 8001128:	2101      	movs	r1, #1
 800112a:	f7ff ff03 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800112e:	2004      	movs	r0, #4
 8001130:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001136:	f7ff befd 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800113a:	2008      	movs	r0, #8
 800113c:	2101      	movs	r1, #1
 800113e:	f7ff fef9 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001142:	2008      	movs	r0, #8
 8001144:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800114a:	f7ff bef3 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800114e:	2010      	movs	r0, #16
 8001150:	2101      	movs	r1, #1
 8001152:	f7ff feef 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001156:	2010      	movs	r0, #16
 8001158:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800115a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800115e:	f7ff bee9 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001162:	2020      	movs	r0, #32
 8001164:	2101      	movs	r1, #1
 8001166:	f7ff fee5 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800116a:	2020      	movs	r0, #32
 800116c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800116e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001172:	f7ff bedf 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001176:	2040      	movs	r0, #64	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	f7ff fedb 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800117e:	2040      	movs	r0, #64	; 0x40
 8001180:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001186:	f7ff bed5 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800118a:	2080      	movs	r0, #128	; 0x80
 800118c:	2101      	movs	r1, #1
 800118e:	f7ff fed1 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001192:	2080      	movs	r0, #128	; 0x80
 8001194:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800119a:	f7ff becb 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800119e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011a2:	2101      	movs	r1, #1
 80011a4:	f7ff fec6 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80011a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011ac:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80011b2:	f7ff bebf 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 80011b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ba:	2101      	movs	r1, #1
 80011bc:	f7ff feba 	bl	8000f34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80011c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80011ca:	f7ff beb3 	b.w	8000f34 <RCC_AHB1PeriphResetCmd>
 80011ce:	bf00      	nop
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021c00 	.word	0x40021c00
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022400 	.word	0x40022400
 80011f8:	40022800 	.word	0x40022800

080011fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80011fc:	2200      	movs	r2, #0
 80011fe:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001202:	4613      	mov	r3, r2
 8001204:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001206:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001208:	f04f 0803 	mov.w	r8, #3
 800120c:	e004      	b.n	8001218 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800120e:	3301      	adds	r3, #1
 8001210:	2b10      	cmp	r3, #16
 8001212:	f102 0202 	add.w	r2, r2, #2
 8001216:	d02c      	beq.n	8001272 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001218:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800121c:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8001220:	42a5      	cmp	r5, r4
 8001222:	d1f4      	bne.n	800120e <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001224:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001228:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800122c:	fa08 f402 	lsl.w	r4, r8, r2
 8001230:	43e4      	mvns	r4, r4
 8001232:	ea04 0909 	and.w	r9, r4, r9
 8001236:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800123a:	f8d0 9000 	ldr.w	r9, [r0]
 800123e:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001242:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001246:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800124a:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800124e:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001252:	d911      	bls.n	8001278 <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001254:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001256:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800125a:	402c      	ands	r4, r5
 800125c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800125e:	68c5      	ldr	r5, [r0, #12]
 8001260:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001264:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001266:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001268:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800126a:	60c4      	str	r4, [r0, #12]
 800126c:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001270:	d1d2      	bne.n	8001218 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001272:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001276:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001278:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800127c:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001280:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001284:	ea04 0a0a 	and.w	sl, r4, sl
 8001288:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800128c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001290:	fa09 f902 	lsl.w	r9, r9, r2
 8001294:	ea49 090a 	orr.w	r9, r9, sl
 8001298:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800129c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80012a0:	ea29 0505 	bic.w	r5, r9, r5
 80012a4:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80012a6:	6845      	ldr	r5, [r0, #4]
 80012a8:	fa0c fc03 	lsl.w	ip, ip, r3
 80012ac:	fa1f fc8c 	uxth.w	ip, ip
 80012b0:	ea4c 0505 	orr.w	r5, ip, r5
 80012b4:	6045      	str	r5, [r0, #4]
 80012b6:	e7cd      	b.n	8001254 <GPIO_Init+0x58>

080012b8 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80012b8:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80012ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012be:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80012c0:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80012c2:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80012c4:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80012c6:	71c3      	strb	r3, [r0, #7]
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80012ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d2:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80012d4:	9b01      	ldr	r3, [sp, #4]
 80012d6:	430b      	orrs	r3, r1
 80012d8:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80012de:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80012e4:	69c3      	ldr	r3, [r0, #28]
 80012e6:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80012e8:	69c3      	ldr	r3, [r0, #28]
 80012ea:	9301      	str	r3, [sp, #4]
}
 80012ec:	b002      	add	sp, #8
 80012ee:	4770      	bx	lr

080012f0 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80012f0:	6903      	ldr	r3, [r0, #16]
 80012f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80012f4:	bf0c      	ite	eq
 80012f6:	2000      	moveq	r0, #0
 80012f8:	2001      	movne	r0, #1
 80012fa:	4770      	bx	lr

080012fc <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80012fc:	6900      	ldr	r0, [r0, #16]
}
 80012fe:	b280      	uxth	r0, r0
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001304:	6943      	ldr	r3, [r0, #20]
 8001306:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001308:	bf0c      	ite	eq
 800130a:	2000      	moveq	r0, #0
 800130c:	2001      	movne	r0, #1
 800130e:	4770      	bx	lr

08001310 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001310:	6940      	ldr	r0, [r0, #20]
}
 8001312:	b280      	uxth	r0, r0
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001318:	8301      	strh	r1, [r0, #24]
 800131a:	4770      	bx	lr

0800131c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800131c:	8341      	strh	r1, [r0, #26]
 800131e:	4770      	bx	lr

08001320 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001320:	b90a      	cbnz	r2, 8001326 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001322:	8341      	strh	r1, [r0, #26]
 8001324:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001326:	8301      	strh	r1, [r0, #24]
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800132c:	6141      	str	r1, [r0, #20]
 800132e:	4770      	bx	lr

08001330 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001330:	6943      	ldr	r3, [r0, #20]
 8001332:	4059      	eors	r1, r3
 8001334:	6141      	str	r1, [r0, #20]
 8001336:	4770      	bx	lr

08001338 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001338:	08cb      	lsrs	r3, r1, #3
 800133a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800133e:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001342:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001344:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001346:	6a04      	ldr	r4, [r0, #32]
 8001348:	230f      	movs	r3, #15
 800134a:	408b      	lsls	r3, r1
 800134c:	ea24 0303 	bic.w	r3, r4, r3
 8001350:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001352:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8001354:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001358:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800135a:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800135c:	6203      	str	r3, [r0, #32]
}
 800135e:	4770      	bx	lr

08001360 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001360:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001362:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <TIM_DeInit+0x184>)
 8001364:	4298      	cmp	r0, r3
 8001366:	d035      	beq.n	80013d4 <TIM_DeInit+0x74>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8001368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800136c:	d03c      	beq.n	80013e8 <TIM_DeInit+0x88>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800136e:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <TIM_DeInit+0x188>)
 8001370:	4298      	cmp	r0, r3
 8001372:	d043      	beq.n	80013fc <TIM_DeInit+0x9c>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8001374:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <TIM_DeInit+0x18c>)
 8001376:	4298      	cmp	r0, r3
 8001378:	d04a      	beq.n	8001410 <TIM_DeInit+0xb0>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <TIM_DeInit+0x190>)
 800137c:	4298      	cmp	r0, r3
 800137e:	d051      	beq.n	8001424 <TIM_DeInit+0xc4>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <TIM_DeInit+0x194>)
 8001382:	4298      	cmp	r0, r3
 8001384:	d058      	beq.n	8001438 <TIM_DeInit+0xd8>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <TIM_DeInit+0x198>)
 8001388:	4298      	cmp	r0, r3
 800138a:	d05f      	beq.n	800144c <TIM_DeInit+0xec>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <TIM_DeInit+0x19c>)
 800138e:	4298      	cmp	r0, r3
 8001390:	d066      	beq.n	8001460 <TIM_DeInit+0x100>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <TIM_DeInit+0x1a0>)
 8001394:	4298      	cmp	r0, r3
 8001396:	d06d      	beq.n	8001474 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <TIM_DeInit+0x1a4>)
 800139a:	4298      	cmp	r0, r3
 800139c:	d076      	beq.n	800148c <TIM_DeInit+0x12c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <TIM_DeInit+0x1a8>)
 80013a0:	4298      	cmp	r0, r3
 80013a2:	d07f      	beq.n	80014a4 <TIM_DeInit+0x144>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80013a4:	4b59      	ldr	r3, [pc, #356]	; (800150c <TIM_DeInit+0x1ac>)
 80013a6:	4298      	cmp	r0, r3
 80013a8:	f000 8088 	beq.w	80014bc <TIM_DeInit+0x15c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <TIM_DeInit+0x1b0>)
 80013ae:	4298      	cmp	r0, r3
 80013b0:	f000 808e 	beq.w	80014d0 <TIM_DeInit+0x170>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <TIM_DeInit+0x1b4>)
 80013b6:	4298      	cmp	r0, r3
 80013b8:	d000      	beq.n	80013bc <TIM_DeInit+0x5c>
 80013ba:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80013bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013c0:	2101      	movs	r1, #1
 80013c2:	f7ff fddb 	bl	8000f7c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80013c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ca:	2100      	movs	r1, #0
    }   
  }
}
 80013cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80013d0:	f7ff bdd4 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013d4:	2001      	movs	r0, #1
 80013d6:	4601      	mov	r1, r0
 80013d8:	f7ff fddc 	bl	8000f94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80013dc:	2001      	movs	r0, #1
 80013de:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80013e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80013e4:	f7ff bdd6 	b.w	8000f94 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80013e8:	2001      	movs	r0, #1
 80013ea:	4601      	mov	r1, r0
 80013ec:	f7ff fdc6 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80013f0:	2001      	movs	r0, #1
 80013f2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80013f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80013f8:	f7ff bdc0 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80013fc:	2002      	movs	r0, #2
 80013fe:	2101      	movs	r1, #1
 8001400:	f7ff fdbc 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001404:	2002      	movs	r0, #2
 8001406:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800140c:	f7ff bdb6 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001410:	2004      	movs	r0, #4
 8001412:	2101      	movs	r1, #1
 8001414:	f7ff fdb2 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001418:	2004      	movs	r0, #4
 800141a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800141c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001420:	f7ff bdac 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001424:	2008      	movs	r0, #8
 8001426:	2101      	movs	r1, #1
 8001428:	f7ff fda8 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800142c:	2008      	movs	r0, #8
 800142e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001434:	f7ff bda2 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001438:	2010      	movs	r0, #16
 800143a:	2101      	movs	r1, #1
 800143c:	f7ff fd9e 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001440:	2010      	movs	r0, #16
 8001442:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001448:	f7ff bd98 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800144c:	2020      	movs	r0, #32
 800144e:	2101      	movs	r1, #1
 8001450:	f7ff fd94 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001454:	2020      	movs	r0, #32
 8001456:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800145c:	f7ff bd8e 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001460:	2002      	movs	r0, #2
 8001462:	2101      	movs	r1, #1
 8001464:	f7ff fd96 	bl	8000f94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001468:	2002      	movs	r0, #2
 800146a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800146c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001470:	f7ff bd90 	b.w	8000f94 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001474:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001478:	2101      	movs	r1, #1
 800147a:	f7ff fd8b 	bl	8000f94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800147e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001482:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001488:	f7ff bd84 	b.w	8000f94 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800148c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001490:	2101      	movs	r1, #1
 8001492:	f7ff fd7f 	bl	8000f94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001496:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800149a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80014a0:	f7ff bd78 	b.w	8000f94 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80014a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014a8:	2101      	movs	r1, #1
 80014aa:	f7ff fd73 	bl	8000f94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80014ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014b2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80014b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80014b8:	f7ff bd6c 	b.w	8000f94 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80014bc:	2040      	movs	r0, #64	; 0x40
 80014be:	2101      	movs	r1, #1
 80014c0:	f7ff fd5c 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80014c4:	2040      	movs	r0, #64	; 0x40
 80014c6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80014c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80014cc:	f7ff bd56 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80014d0:	2080      	movs	r0, #128	; 0x80
 80014d2:	2101      	movs	r1, #1
 80014d4:	f7ff fd52 	bl	8000f7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80014d8:	2080      	movs	r0, #128	; 0x80
 80014da:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80014dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80014e0:	f7ff bd4c 	b.w	8000f7c <RCC_APB1PeriphResetCmd>
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40000800 	.word	0x40000800
 80014f0:	40000c00 	.word	0x40000c00
 80014f4:	40001000 	.word	0x40001000
 80014f8:	40001400 	.word	0x40001400
 80014fc:	40010400 	.word	0x40010400
 8001500:	40014000 	.word	0x40014000
 8001504:	40014400 	.word	0x40014400
 8001508:	40014800 	.word	0x40014800
 800150c:	40001800 	.word	0x40001800
 8001510:	40001c00 	.word	0x40001c00
 8001514:	40002000 	.word	0x40002000

08001518 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <TIM_TimeBaseInit+0x90>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800151a:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800151c:	4290      	cmp	r0, r2
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800151e:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001520:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001522:	d012      	beq.n	800154a <TIM_TimeBaseInit+0x32>
 8001524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001528:	4290      	cmp	r0, r2
 800152a:	d00e      	beq.n	800154a <TIM_TimeBaseInit+0x32>
 800152c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001530:	d00b      	beq.n	800154a <TIM_TimeBaseInit+0x32>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001532:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001536:	4290      	cmp	r0, r2
 8001538:	d007      	beq.n	800154a <TIM_TimeBaseInit+0x32>
 800153a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800153e:	4290      	cmp	r0, r2
 8001540:	d003      	beq.n	800154a <TIM_TimeBaseInit+0x32>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001546:	4290      	cmp	r0, r2
 8001548:	d103      	bne.n	8001552 <TIM_TimeBaseInit+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800154a:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800154c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001550:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <TIM_TimeBaseInit+0x94>)
 8001554:	4290      	cmp	r0, r2
 8001556:	d01e      	beq.n	8001596 <TIM_TimeBaseInit+0x7e>
 8001558:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800155c:	4290      	cmp	r0, r2
 800155e:	d01a      	beq.n	8001596 <TIM_TimeBaseInit+0x7e>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001560:	890e      	ldrh	r6, [r1, #8]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001562:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001564:	880c      	ldrh	r4, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800156a:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800156e:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001570:	4333      	orrs	r3, r6
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001572:	4290      	cmp	r0, r2
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001574:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001576:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001578:	8504      	strh	r4, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800157a:	d006      	beq.n	800158a <TIM_TimeBaseInit+0x72>
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <TIM_TimeBaseInit+0x98>)
 800157e:	4298      	cmp	r0, r3
 8001580:	d003      	beq.n	800158a <TIM_TimeBaseInit+0x72>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001582:	2301      	movs	r3, #1
 8001584:	8283      	strh	r3, [r0, #20]
}
 8001586:	bc70      	pop	{r4, r5, r6}
 8001588:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800158a:	7a8b      	ldrb	r3, [r1, #10]
 800158c:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800158e:	2301      	movs	r3, #1
 8001590:	8283      	strh	r3, [r0, #20]
}
 8001592:	bc70      	pop	{r4, r5, r6}
 8001594:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001596:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001598:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800159a:	684a      	ldr	r2, [r1, #4]
 800159c:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800159e:	8503      	strh	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80015a0:	2301      	movs	r3, #1
 80015a2:	8283      	strh	r3, [r0, #20]
}
 80015a4:	bc70      	pop	{r4, r5, r6}
 80015a6:	4770      	bx	lr
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40001000 	.word	0x40001000
 80015b0:	40010400 	.word	0x40010400

080015b4 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80015b4:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ba:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80015bc:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80015be:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80015c0:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80015c2:	7283      	strb	r3, [r0, #10]
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80015c8:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80015ca:	8282      	strh	r2, [r0, #20]
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80015d0:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80015da:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80015dc:	8001      	strh	r1, [r0, #0]
 80015de:	4770      	bx	lr

080015e0 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80015e0:	6241      	str	r1, [r0, #36]	; 0x24
 80015e2:	4770      	bx	lr

080015e4 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80015e4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80015e6:	4770      	bx	lr

080015e8 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80015e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80015ea:	4770      	bx	lr

080015ec <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80015ec:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 80015ee:	b280      	uxth	r0, r0
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80015f4:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015f6:	b929      	cbnz	r1, 8001604 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80015f8:	f023 0302 	bic.w	r3, r3, #2
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	8003      	strh	r3, [r0, #0]
 8001602:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001604:	b29b      	uxth	r3, r3
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	8003      	strh	r3, [r0, #0]
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001610:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001612:	b929      	cbnz	r1, 8001620 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	0c1b      	lsrs	r3, r3, #16
 800161c:	8003      	strh	r3, [r0, #0]
 800161e:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001620:	b29b      	uxth	r3, r3
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	8003      	strh	r3, [r0, #0]
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop

0800162c <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800162c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800162e:	b929      	cbnz	r1, 800163c <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	0c1b      	lsrs	r3, r3, #16
 8001638:	8003      	strh	r3, [r0, #0]
 800163a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800163c:	b29b      	uxth	r3, r3
 800163e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001642:	8003      	strh	r3, [r0, #0]
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8001648:	8803      	ldrh	r3, [r0, #0]
 800164a:	f023 0308 	bic.w	r3, r3, #8
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001654:	8803      	ldrh	r3, [r0, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4319      	orrs	r1, r3
 800165a:	8001      	strh	r1, [r0, #0]
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001660:	8803      	ldrh	r3, [r0, #0]
 8001662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800166c:	8803      	ldrh	r3, [r0, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4319      	orrs	r1, r3
 8001672:	8001      	strh	r1, [r0, #0]
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001678:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800167a:	b929      	cbnz	r1, 8001688 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	8003      	strh	r3, [r0, #0]
 8001686:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001688:	b29b      	uxth	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	8003      	strh	r3, [r0, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001694:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001696:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001698:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800169c:	898f      	ldrh	r7, [r1, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800169e:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80016a0:	4d1b      	ldr	r5, [pc, #108]	; (8001710 <TIM_OC1Init+0x7c>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80016a2:	f024 0401 	bic.w	r4, r4, #1
 80016a6:	0424      	lsls	r4, r4, #16
 80016a8:	0c24      	lsrs	r4, r4, #16
 80016aa:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ac:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ae:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016b0:	8b03      	ldrh	r3, [r0, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80016b2:	f022 0202 	bic.w	r2, r2, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80016b6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80016ba:	0412      	lsls	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80016bc:	ea4c 0707 	orr.w	r7, ip, r7
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80016c0:	041b      	lsls	r3, r3, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80016c2:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80016c4:	b2bf      	uxth	r7, r7
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80016c6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80016c8:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80016ca:	ea47 0202 	orr.w	r2, r7, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ce:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80016d0:	ea43 0306 	orr.w	r3, r3, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80016d4:	d00a      	beq.n	80016ec <TIM_OC1Init+0x58>
 80016d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016da:	42a8      	cmp	r0, r5
 80016dc:	d006      	beq.n	80016ec <TIM_OC1Init+0x58>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80016de:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016e0:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016e2:	8303      	strh	r3, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80016e4:	bcf0      	pop	{r4, r5, r6, r7}
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80016e6:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016e8:	8402      	strh	r2, [r0, #32]
}
 80016ea:	4770      	bx	lr
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80016ec:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80016f0:	8a4f      	ldrh	r7, [r1, #18]
 80016f2:	8a0d      	ldrh	r5, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80016f4:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80016f6:	f022 0208 	bic.w	r2, r2, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80016fa:	ea42 020c 	orr.w	r2, r2, ip
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80016fe:	433d      	orrs	r5, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001700:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001704:	f022 0204 	bic.w	r2, r2, #4
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001708:	b2ad      	uxth	r5, r5
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800170a:	4332      	orrs	r2, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800170c:	432c      	orrs	r4, r5
 800170e:	e7e6      	b.n	80016de <TIM_OC1Init+0x4a>
 8001710:	40010000 	.word	0x40010000

08001714 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001714:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001716:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001718:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800171c:	884f      	ldrh	r7, [r1, #2]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800171e:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001720:	4d1f      	ldr	r5, [pc, #124]	; (80017a0 <TIM_OC2Init+0x8c>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001722:	f024 0410 	bic.w	r4, r4, #16
 8001726:	0424      	lsls	r4, r4, #16
 8001728:	0c24      	lsrs	r4, r4, #16
 800172a:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800172c:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800172e:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001730:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001732:	f022 0220 	bic.w	r2, r2, #32
 8001736:	0412      	lsls	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001738:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800173c:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800173e:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001740:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001744:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001746:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800174a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800174e:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001750:	b292      	uxth	r2, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001752:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001754:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001756:	d00a      	beq.n	800176e <TIM_OC2Init+0x5a>
 8001758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800175c:	42a8      	cmp	r0, r5
 800175e:	d006      	beq.n	800176e <TIM_OC2Init+0x5a>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001760:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001762:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001764:	8303      	strh	r3, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001766:	bcf0      	pop	{r4, r5, r6, r7}
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001768:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800176a:	8402      	strh	r2, [r0, #32]
}
 800176c:	4770      	bx	lr
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800176e:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001770:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001774:	888f      	ldrh	r7, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001776:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	b292      	uxth	r2, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800177e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001782:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001786:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 800178a:	4015      	ands	r5, r2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800178c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001790:	ea45 1207 	orr.w	r2, r5, r7, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001794:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001798:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800179a:	b2a4      	uxth	r4, r4
 800179c:	e7e0      	b.n	8001760 <TIM_OC2Init+0x4c>
 800179e:	bf00      	nop
 80017a0:	40010000 	.word	0x40010000

080017a4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80017a4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80017a6:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80017a8:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80017ac:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80017ae:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80017b0:	4d1e      	ldr	r5, [pc, #120]	; (800182c <TIM_OC3Init+0x88>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80017b2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80017b6:	0424      	lsls	r4, r4, #16
 80017b8:	0c24      	lsrs	r4, r4, #16
 80017ba:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017bc:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017be:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017c0:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80017c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017c6:	0412      	lsls	r2, r2, #16
 80017c8:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80017ca:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80017ce:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80017d2:	041b      	lsls	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80017d4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80017d8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80017da:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80017dc:	b292      	uxth	r2, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017de:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80017e0:	ea43 0306 	orr.w	r3, r3, r6
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80017e4:	d00a      	beq.n	80017fc <TIM_OC3Init+0x58>
 80017e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017ea:	42a8      	cmp	r0, r5
 80017ec:	d006      	beq.n	80017fc <TIM_OC3Init+0x58>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80017ee:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017f0:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017f2:	8383      	strh	r3, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80017f4:	bcf0      	pop	{r4, r5, r6, r7}
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80017f6:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017f8:	8402      	strh	r2, [r0, #32]
}
 80017fa:	4770      	bx	lr
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80017fc:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80017fe:	f8b1 c010 	ldrh.w	ip, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001802:	888f      	ldrh	r7, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001804:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180a:	b292      	uxth	r2, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800180c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001810:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001814:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8001818:	4015      	ands	r5, r2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800181a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800181e:	ea45 2207 	orr.w	r2, r5, r7, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001822:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001826:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001828:	b2a4      	uxth	r4, r4
 800182a:	e7e0      	b.n	80017ee <TIM_OC3Init+0x4a>
 800182c:	40010000 	.word	0x40010000

08001830 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001830:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001832:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001834:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001838:	884f      	ldrh	r7, [r1, #2]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800183a:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800183c:	4d16      	ldr	r5, [pc, #88]	; (8001898 <TIM_OC4Init+0x68>)
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800183e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001842:	0424      	lsls	r4, r4, #16
 8001844:	0c24      	lsrs	r4, r4, #16
 8001846:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001848:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800184a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800184c:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800184e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001852:	0412      	lsls	r2, r2, #16
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001854:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001858:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800185a:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800185c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001860:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001862:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001866:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800186a:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800186c:	b292      	uxth	r2, r2
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800186e:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001870:	b29b      	uxth	r3, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001872:	d00a      	beq.n	800188a <TIM_OC4Init+0x5a>
 8001874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001878:	42a8      	cmp	r0, r5
 800187a:	d006      	beq.n	800188a <TIM_OC4Init+0x5a>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800187c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800187e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001880:	8383      	strh	r3, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001882:	bcf0      	pop	{r4, r5, r6, r7}
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001884:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001886:	8402      	strh	r2, [r0, #32]
}
 8001888:	4770      	bx	lr
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800188a:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800188c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001890:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001894:	b2a4      	uxth	r4, r4
 8001896:	e7f1      	b.n	800187c <TIM_OC4Init+0x4c>
 8001898:	40010000 	.word	0x40010000

0800189c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800189c:	2300      	movs	r3, #0
 800189e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80018a0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80018a2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80018a4:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80018a6:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80018a8:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80018aa:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80018ac:	8243      	strh	r3, [r0, #18]
 80018ae:	4770      	bx	lr

080018b0 <TIM_SelectOCxM>:
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80018b0:	8c03      	ldrh	r3, [r0, #32]
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80018b2:	b410      	push	{r4}
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80018b4:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80018b6:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80018b8:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80018ba:	ea23 0404 	bic.w	r4, r3, r4

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80018be:	f021 0308 	bic.w	r3, r1, #8
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80018c2:	8404      	strh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 80018c4:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80018c6:	b17b      	cbz	r3, 80018e8 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80018c8:	3904      	subs	r1, #4
 80018ca:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80018ce:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80018d2:	580c      	ldr	r4, [r1, r0]
 80018d4:	4023      	ands	r3, r4
 80018d6:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	580b      	ldr	r3, [r1, r0]
  }
}
 80018dc:	f85d 4b04 	ldr.w	r4, [sp], #4

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80018e0:	b292      	uxth	r2, r2
 80018e2:	431a      	orrs	r2, r3
 80018e4:	500a      	str	r2, [r1, r0]
  }
}
 80018e6:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 80018e8:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80018ea:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80018ee:	5844      	ldr	r4, [r0, r1]
 80018f0:	4023      	ands	r3, r4
 80018f2:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80018f4:	5843      	ldr	r3, [r0, r1]
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 80018f6:	f85d 4b04 	ldr.w	r4, [sp], #4

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80018fa:	431a      	orrs	r2, r3
 80018fc:	5042      	str	r2, [r0, r1]
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 80018fe:	4770      	bx	lr

08001900 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001900:	6341      	str	r1, [r0, #52]	; 0x34
 8001902:	4770      	bx	lr

08001904 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001904:	6381      	str	r1, [r0, #56]	; 0x38
 8001906:	4770      	bx	lr

08001908 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001908:	63c1      	str	r1, [r0, #60]	; 0x3c
 800190a:	4770      	bx	lr

0800190c <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800190c:	6401      	str	r1, [r0, #64]	; 0x40
 800190e:	4770      	bx	lr

08001910 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001910:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800191a:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800191c:	8301      	strh	r1, [r0, #24]
 800191e:	4770      	bx	lr

08001920 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001920:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800192a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800192e:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001930:	8303      	strh	r3, [r0, #24]
 8001932:	4770      	bx	lr

08001934 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001934:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800193e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001940:	8381      	strh	r1, [r0, #28]
 8001942:	4770      	bx	lr

08001944 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001944:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800194e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001952:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001954:	8383      	strh	r3, [r0, #28]
 8001956:	4770      	bx	lr

08001958 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001958:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800195a:	f023 0308 	bic.w	r3, r3, #8
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001962:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001964:	8301      	strh	r1, [r0, #24]
 8001966:	4770      	bx	lr

08001968 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001968:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800196a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001972:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001976:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001978:	8303      	strh	r3, [r0, #24]
 800197a:	4770      	bx	lr

0800197c <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800197c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800197e:	f023 0308 	bic.w	r3, r3, #8
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001986:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001988:	8381      	strh	r1, [r0, #28]
 800198a:	4770      	bx	lr

0800198c <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800198c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800198e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001996:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800199a:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800199c:	8383      	strh	r3, [r0, #28]
 800199e:	4770      	bx	lr

080019a0 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80019a0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80019aa:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80019ac:	8301      	strh	r1, [r0, #24]
 80019ae:	4770      	bx	lr

080019b0 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80019b0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80019b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80019ba:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80019be:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80019c0:	8303      	strh	r3, [r0, #24]
 80019c2:	4770      	bx	lr

080019c4 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80019c4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80019ce:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80019d0:	8381      	strh	r1, [r0, #28]
 80019d2:	4770      	bx	lr

080019d4 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80019d4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80019d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80019de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80019e2:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80019e4:	8383      	strh	r3, [r0, #28]
 80019e6:	4770      	bx	lr

080019e8 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80019e8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80019ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80019f2:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80019f4:	8301      	strh	r1, [r0, #24]
 80019f6:	4770      	bx	lr

080019f8 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80019f8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80019fa:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80019fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001a02:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a04:	8303      	strh	r3, [r0, #24]
 8001a06:	4770      	bx	lr

08001a08 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001a08:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8001a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001a12:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001a14:	8381      	strh	r1, [r0, #28]
 8001a16:	4770      	bx	lr

08001a18 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001a18:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8001a1a:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001a1e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001a22:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001a24:	8383      	strh	r3, [r0, #28]
 8001a26:	4770      	bx	lr

08001a28 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001a28:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001a32:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a34:	8401      	strh	r1, [r0, #32]
 8001a36:	4770      	bx	lr

08001a38 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8001a38:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001a3a:	f023 0308 	bic.w	r3, r3, #8
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001a42:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a44:	8401      	strh	r1, [r0, #32]
 8001a46:	4770      	bx	lr

08001a48 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001a48:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8001a4a:	f023 0320 	bic.w	r3, r3, #32
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001a52:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8001a56:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a58:	8403      	strh	r3, [r0, #32]
 8001a5a:	4770      	bx	lr

08001a5c <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8001a5c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001a66:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8001a6a:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a6c:	8403      	strh	r3, [r0, #32]
 8001a6e:	4770      	bx	lr

08001a70 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001a70:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001a72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001a7a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001a7e:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a80:	8403      	strh	r3, [r0, #32]
 8001a82:	4770      	bx	lr

08001a84 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001a84:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8001a8e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001a92:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001a94:	8403      	strh	r3, [r0, #32]
 8001a96:	4770      	bx	lr

08001a98 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001a98:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8001aa2:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8001aa6:	b28b      	uxth	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001aa8:	8403      	strh	r3, [r0, #32]
 8001aaa:	4770      	bx	lr

08001aac <TIM_CCxCmd>:
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001aac:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8001aae:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8001ab0:	2401      	movs	r4, #1
 8001ab2:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	ea23 0304 	bic.w	r3, r3, r4
 8001aba:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001abc:	8c03      	ldrh	r3, [r0, #32]
}
 8001abe:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001ac2:	408a      	lsls	r2, r1
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	8403      	strh	r3, [r0, #32]
}
 8001aca:	4770      	bx	lr

08001acc <TIM_CCxNCmd>:
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001acc:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8001ace:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8001ad0:	2404      	movs	r4, #4
 8001ad2:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	ea23 0304 	bic.w	r3, r3, r4
 8001ada:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001adc:	8c03      	ldrh	r3, [r0, #32]
}
 8001ade:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001ae2:	408a      	lsls	r2, r1
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8403      	strh	r3, [r0, #32]
}
 8001aea:	4770      	bx	lr

08001aec <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001aec:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001aee:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d032      	beq.n	8001b5a <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d058      	beq.n	8001baa <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001af8:	2b08      	cmp	r3, #8
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001afa:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001afc:	f000 8083 	beq.w	8001c06 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b00:	884e      	ldrh	r6, [r1, #2]
 8001b02:	888f      	ldrh	r7, [r1, #4]
 8001b04:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b06:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001b08:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001b0c:	0409      	lsls	r1, r1, #16
 8001b0e:	0c09      	lsrs	r1, r1, #16
 8001b10:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001b12:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8001b14:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001b1e:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001b20:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001b22:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001b24:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001b26:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001b2a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001b2e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001b38:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001b3a:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001b3c:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001b3e:	8b83      	ldrh	r3, [r0, #28]
 8001b40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001b4a:	8b83      	ldrh	r3, [r0, #28]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001b56:	bcf0      	pop	{r4, r5, r6, r7}
 8001b58:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001b5a:	8c02      	ldrh	r2, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b5c:	888d      	ldrh	r5, [r1, #4]
 8001b5e:	890e      	ldrh	r6, [r1, #8]
 8001b60:	884c      	ldrh	r4, [r1, #2]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b62:	88c9      	ldrh	r1, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	0412      	lsls	r2, r2, #16
 8001b6a:	0c12      	lsrs	r2, r2, #16
 8001b6c:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b6e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b70:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001b72:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001b74:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b78:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001b7c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b80:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001b82:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001b86:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b88:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001b8a:	4323      	orrs	r3, r4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001b8c:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b8e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b90:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001b92:	8b03      	ldrh	r3, [r0, #24]
 8001b94:	f023 030c 	bic.w	r3, r3, #12
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	0c1b      	lsrs	r3, r3, #16
 8001b9c:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001b9e:	8b03      	ldrh	r3, [r0, #24]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	8303      	strh	r3, [r0, #24]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001baa:	8c02      	ldrh	r2, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001bac:	884e      	ldrh	r6, [r1, #2]
 8001bae:	888c      	ldrh	r4, [r1, #4]
 8001bb0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001bb2:	88c9      	ldrh	r1, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001bb4:	f022 0210 	bic.w	r2, r2, #16
 8001bb8:	0412      	lsls	r2, r2, #16
 8001bba:	0c12      	lsrs	r2, r2, #16
 8001bbc:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bbe:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bc0:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc6:	051b      	lsls	r3, r3, #20
 8001bc8:	0d1b      	lsrs	r3, r3, #20
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001bca:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001bcc:	ea43 3207 	orr.w	r2, r3, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bd0:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001bd4:	ea45 1306 	orr.w	r3, r5, r6, lsl #4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001bd8:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001bda:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001be4:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001be6:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001be8:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001bea:	8b03      	ldrh	r3, [r0, #24]
 8001bec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001bf6:	8b03      	ldrh	r3, [r0, #24]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	8303      	strh	r3, [r0, #24]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	0c1b      	lsrs	r3, r3, #16
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001c0e:	884d      	ldrh	r5, [r1, #2]
 8001c10:	888c      	ldrh	r4, [r1, #4]
 8001c12:	890e      	ldrh	r6, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c14:	88ca      	ldrh	r2, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001c16:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c18:	8b81      	ldrh	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 8001c1a:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8001c1c:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
 8001c1e:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001c20:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001c24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001c28:	ea41 1106 	orr.w	r1, r1, r6, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001c2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001c30:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001c38:	4321      	orrs	r1, r4
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001c3a:	8381      	strh	r1, [r0, #28]
  TIMx->CCER = tmpccer;
 8001c3c:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8001c3e:	8b83      	ldrh	r3, [r0, #28]
 8001c40:	f023 030c 	bic.w	r3, r3, #12
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001c4a:	8b83      	ldrh	r3, [r0, #28]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	8383      	strh	r3, [r0, #28]
 8001c52:	e780      	b.n	8001b56 <TIM_ICInit+0x6a>

08001c54 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001c54:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001c56:	2201      	movs	r2, #1
 8001c58:	8082      	strh	r2, [r0, #4]
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001c5a:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001c5c:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001c5e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001c60:	8103      	strh	r3, [r0, #8]
 8001c62:	4770      	bx	lr

08001c64 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001c64:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001c66:	884d      	ldrh	r5, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001c68:	888c      	ldrh	r4, [r1, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001c6a:	880b      	ldrh	r3, [r1, #0]
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001c6c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001c70:	8c02      	ldrh	r2, [r0, #32]
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c72:	88c9      	ldrh	r1, [r1, #6]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001c74:	2d00      	cmp	r5, #0
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001c76:	bf14      	ite	ne
 8001c78:	2600      	movne	r6, #0
 8001c7a:	2602      	moveq	r6, #2
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001c7c:	2c01      	cmp	r4, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001c7e:	bf14      	ite	ne
 8001c80:	2701      	movne	r7, #1
 8001c82:	2702      	moveq	r7, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d04b      	beq.n	8001d20 <TIM_PWMIConfig+0xbc>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001c88:	f022 0210 	bic.w	r2, r2, #16
 8001c8c:	0412      	lsls	r2, r2, #16
 8001c8e:	0c12      	lsrs	r2, r2, #16
 8001c90:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c92:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c94:	8c02      	ldrh	r2, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9a:	051b      	lsls	r3, r3, #20
 8001c9c:	0d1b      	lsrs	r3, r3, #20
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001c9e:	b292      	uxth	r2, r2
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001ca0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001ca8:	b29b      	uxth	r3, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001caa:	ea42 1505 	orr.w	r5, r2, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001cae:	ea43 2404 	orr.w	r4, r3, r4, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001cb2:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001cb4:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001cb6:	f045 0510 	orr.w	r5, r5, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cba:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cbc:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001cbe:	8b03      	ldrh	r3, [r0, #24]
 8001cc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	0c1b      	lsrs	r3, r3, #16
 8001cc8:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001cca:	8b03      	ldrh	r3, [r0, #24]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001cd6:	8c03      	ldrh	r3, [r0, #32]
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce2:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ce4:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001ce8:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001cec:	b29b      	uxth	r3, r3

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001cee:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cf2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001cfa:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001cfe:	431e      	orrs	r6, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d00:	ea4c 0707 	orr.w	r7, ip, r7
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d04:	8307      	strh	r7, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d06:	8406      	strh	r6, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001d08:	8b03      	ldrh	r3, [r0, #24]
 8001d0a:	f023 030c 	bic.w	r3, r3, #12
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001d14:	8b03      	ldrh	r3, [r0, #24]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4319      	orrs	r1, r3
 8001d1a:	8301      	strh	r1, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d1e:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	0412      	lsls	r2, r2, #16
 8001d26:	0c12      	lsrs	r2, r2, #16
 8001d28:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d2a:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d2c:	8c02      	ldrh	r2, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001d2e:	b29b      	uxth	r3, r3
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001d30:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d34:	f022 020a 	bic.w	r2, r2, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d38:	ea43 130c 	orr.w	r3, r3, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d3c:	0412      	lsls	r2, r2, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001d3e:	f045 0501 	orr.w	r5, r5, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d42:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d44:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001d46:	431c      	orrs	r4, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001d48:	432a      	orrs	r2, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d4a:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d4c:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001d4e:	8b02      	ldrh	r2, [r0, #24]
 8001d50:	f022 020c 	bic.w	r2, r2, #12
 8001d54:	0412      	lsls	r2, r2, #16
 8001d56:	0c12      	lsrs	r2, r2, #16
 8001d58:	8302      	strh	r2, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001d5a:	8b03      	ldrh	r3, [r0, #24]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001d62:	8c02      	ldrh	r2, [r0, #32]
 8001d64:	f022 0210 	bic.w	r2, r2, #16
 8001d68:	0412      	lsls	r2, r2, #16
 8001d6a:	0c12      	lsrs	r2, r2, #16
 8001d6c:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6e:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d70:	8c02      	ldrh	r2, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d76:	051b      	lsls	r3, r3, #20
 8001d78:	0d1b      	lsrs	r3, r3, #20
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001d7a:	b292      	uxth	r2, r2
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001d7c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001d84:	b29b      	uxth	r3, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001d86:	f042 0210 	orr.w	r2, r2, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001d8a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001d8e:	ea42 1606 	orr.w	r6, r2, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d92:	8307      	strh	r7, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d94:	8406      	strh	r6, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001d96:	8b03      	ldrh	r3, [r0, #24]
 8001d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001da2:	8b03      	ldrh	r3, [r0, #24]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001daa:	b289      	uxth	r1, r1
 8001dac:	8301      	strh	r1, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001dae:	bcf0      	pop	{r4, r5, r6, r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001db4:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8001db6:	4770      	bx	lr

08001db8 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001db8:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8001dba:	4770      	bx	lr

08001dbc <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001dbc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001dbe:	4770      	bx	lr

08001dc0 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001dc0:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001dc2:	4770      	bx	lr

08001dc4 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001dc4:	8b03      	ldrh	r3, [r0, #24]
 8001dc6:	f023 030c 	bic.w	r3, r3, #12
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001dd0:	8b03      	ldrh	r3, [r0, #24]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	8301      	strh	r1, [r0, #24]
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001ddc:	8b03      	ldrh	r3, [r0, #24]
 8001dde:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001de8:	8b03      	ldrh	r3, [r0, #24]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001df0:	b28b      	uxth	r3, r1
 8001df2:	8303      	strh	r3, [r0, #24]
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8001df8:	8b83      	ldrh	r3, [r0, #28]
 8001dfa:	f023 030c 	bic.w	r3, r3, #12
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001e04:	8b83      	ldrh	r3, [r0, #28]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4319      	orrs	r1, r3
 8001e0a:	8381      	strh	r1, [r0, #28]
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001e10:	8b83      	ldrh	r3, [r0, #28]
 8001e12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e16:	041b      	lsls	r3, r3, #16
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001e1c:	8b83      	ldrh	r3, [r0, #28]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001e24:	b28b      	uxth	r3, r1
 8001e26:	8383      	strh	r3, [r0, #28]
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001e2c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8001e30:	880b      	ldrh	r3, [r1, #0]
 8001e32:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8001e34:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001e36:	888f      	ldrh	r7, [r1, #4]
 8001e38:	88ce      	ldrh	r6, [r1, #6]
 8001e3a:	890d      	ldrh	r5, [r1, #8]
 8001e3c:	894c      	ldrh	r4, [r1, #10]
 8001e3e:	ea4c 0303 	orr.w	r3, ip, r3
 8001e42:	433b      	orrs	r3, r7
 8001e44:	4333      	orrs	r3, r6
 8001e46:	432b      	orrs	r3, r5
 8001e48:	4323      	orrs	r3, r4
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8001e52:	bcf0      	pop	{r4, r5, r6, r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001e5c:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001e5e:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8001e60:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001e62:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8001e64:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001e66:	8183      	strh	r3, [r0, #12]
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001e6c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e70:	b921      	cbnz	r1, 8001e7c <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001e72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e76:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001e7a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001e8a:	4770      	bx	lr

08001e8c <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001e8c:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e8e:	b929      	cbnz	r1, 8001e9c <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	8083      	strh	r3, [r0, #4]
 8001e9a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	8083      	strh	r3, [r0, #4]
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001ea8:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001eaa:	b929      	cbnz	r1, 8001eb8 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	8083      	strh	r3, [r0, #4]
 8001eb6:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	8083      	strh	r3, [r0, #4]
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop

08001ec4 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001ec4:	8983      	ldrh	r3, [r0, #12]
 8001ec6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ec8:	b91a      	cbnz	r2, 8001ed2 <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001eca:	ea23 0101 	bic.w	r1, r3, r1
 8001ece:	8181      	strh	r1, [r0, #12]
 8001ed0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001ed2:	4319      	orrs	r1, r3
 8001ed4:	8181      	strh	r1, [r0, #12]
 8001ed6:	4770      	bx	lr

08001ed8 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8001ed8:	8281      	strh	r1, [r0, #20]
 8001eda:	4770      	bx	lr

08001edc <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001edc:	8a03      	ldrh	r3, [r0, #16]
 8001ede:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2000      	moveq	r0, #0
 8001ee4:	2001      	movne	r0, #1
 8001ee6:	4770      	bx	lr

08001ee8 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8001ee8:	43c9      	mvns	r1, r1
 8001eea:	b289      	uxth	r1, r1
 8001eec:	8201      	strh	r1, [r0, #16]
 8001eee:	4770      	bx	lr

08001ef0 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001ef0:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001ef2:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001ef4:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8001ef8:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001efa:	d003      	beq.n	8001f04 <TIM_GetITStatus+0x14>
 8001efc:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8001efe:	bf0c      	ite	eq
 8001f00:	2000      	moveq	r0, #0
 8001f02:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001f08:	43c9      	mvns	r1, r1
 8001f0a:	b289      	uxth	r1, r1
 8001f0c:	8201      	strh	r1, [r0, #16]
 8001f0e:	4770      	bx	lr

08001f10 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001f10:	430a      	orrs	r2, r1
 8001f12:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8001f16:	4770      	bx	lr

08001f18 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001f18:	8983      	ldrh	r3, [r0, #12]
 8001f1a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f1c:	b91a      	cbnz	r2, 8001f26 <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001f1e:	ea23 0101 	bic.w	r1, r3, r1
 8001f22:	8181      	strh	r1, [r0, #12]
 8001f24:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001f26:	4319      	orrs	r1, r3
 8001f28:	8181      	strh	r1, [r0, #12]
 8001f2a:	4770      	bx	lr

08001f2c <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001f2c:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f2e:	b929      	cbnz	r1, 8001f3c <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8001f30:	f023 0308 	bic.w	r3, r3, #8
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	8083      	strh	r3, [r0, #4]
 8001f3a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	8083      	strh	r3, [r0, #4]
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8001f48:	8903      	ldrh	r3, [r0, #8]
 8001f4a:	f023 0307 	bic.w	r3, r3, #7
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	8103      	strh	r3, [r0, #8]
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f58:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001f62:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f64:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001f66:	8903      	ldrh	r3, [r0, #8]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f043 0307 	orr.w	r3, r3, #7
 8001f6e:	8103      	strh	r3, [r0, #8]
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001f74:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8001f76:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001f78:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001f7a:	d024      	beq.n	8001fc6 <TIM_TIxExternalClockConfig+0x52>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001f7c:	f024 0401 	bic.w	r4, r4, #1
 8001f80:	0424      	lsls	r4, r4, #16
 8001f82:	0c24      	lsrs	r4, r4, #16
 8001f84:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f86:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f88:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001f8a:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001f8c:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001f90:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f92:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f96:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f9a:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001f9e:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fa2:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fa4:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fa6:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fa8:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001faa:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8001fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001fb4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb6:	8103      	strh	r3, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001fb8:	8903      	ldrh	r3, [r0, #8]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	8103      	strh	r3, [r0, #8]
}
 8001fc2:	bc30      	pop	{r4, r5}
 8001fc4:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001fc6:	f024 0410 	bic.w	r4, r4, #16
 8001fca:	0424      	lsls	r4, r4, #16
 8001fcc:	0c24      	lsrs	r4, r4, #16
 8001fce:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd0:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fd2:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fd4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001fd8:	0524      	lsls	r4, r4, #20
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001fda:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fdc:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fde:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001fe2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001fe6:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001fea:	ea44 3303 	orr.w	r3, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001fee:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001ff2:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001ff4:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff6:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ff8:	8402      	strh	r2, [r0, #32]
 8001ffa:	e7d6      	b.n	8001faa <TIM_TIxExternalClockConfig+0x36>

08001ffc <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001ffc:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8001ffe:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002000:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002004:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002006:	4323      	orrs	r3, r4
 8002008:	b29b      	uxth	r3, r3
 800200a:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200c:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800200e:	8903      	ldrh	r3, [r0, #8]
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 8002010:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002014:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 800201c:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002020:	8103      	strh	r3, [r0, #8]
}
 8002022:	4770      	bx	lr

08002024 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002024:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002026:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002028:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800202c:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800202e:	4323      	orrs	r3, r4
 8002030:	b29b      	uxth	r3, r3
 8002032:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002034:	8101      	strh	r1, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002036:	8903      	ldrh	r3, [r0, #8]
}
 8002038:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800203c:	b29b      	uxth	r3, r3
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	8103      	strh	r3, [r0, #8]
}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002048:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002052:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002054:	8101      	strh	r1, [r0, #8]
 8002056:	4770      	bx	lr

08002058 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002058:	8883      	ldrh	r3, [r0, #4]
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002064:	8883      	ldrh	r3, [r0, #4]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4319      	orrs	r1, r3
 800206a:	8081      	strh	r1, [r0, #4]
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002070:	8903      	ldrh	r3, [r0, #8]
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800207c:	8903      	ldrh	r3, [r0, #8]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4319      	orrs	r1, r3
 8002082:	8101      	strh	r1, [r0, #8]
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002088:	8903      	ldrh	r3, [r0, #8]
 800208a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002094:	8903      	ldrh	r3, [r0, #8]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4319      	orrs	r1, r3
 800209a:	8101      	strh	r1, [r0, #8]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80020a0:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80020a2:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80020a4:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80020a6:	4321      	orrs	r1, r4
 80020a8:	430a      	orrs	r2, r1
 80020aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020ae:	b29c      	uxth	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b0:	8104      	strh	r4, [r0, #8]
}
 80020b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80020b8:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020ba:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80020bc:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020be:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80020c0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80020c4:	f024 0403 	bic.w	r4, r4, #3

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c8:	b2b6      	uxth	r6, r6
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80020ca:	f026 0622 	bic.w	r6, r6, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80020ce:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80020d2:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80020d4:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80020d6:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80020d8:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80020da:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80020dc:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80020e0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80020e4:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80020e6:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80020ea:	b29e      	uxth	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ec:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80020ee:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f0:	8406      	strh	r6, [r0, #32]
}
 80020f2:	bc70      	pop	{r4, r5, r6}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80020f8:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020fa:	b929      	cbnz	r1, 8002108 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80020fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	8083      	strh	r3, [r0, #4]
 8002106:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002108:	b29b      	uxth	r3, r3
 800210a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210e:	8083      	strh	r3, [r0, #4]
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002114:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <main>:
  while ((msTicks - curTicks) < dlyTicks);
}

void setSysTick(void){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 800211c:	4a13      	ldr	r2, [pc, #76]	; (800216c <main+0x50>)
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <main+0x54>)
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	fba3 1202 	umull	r1, r2, r3, r2
 8002126:	0992      	lsrs	r2, r2, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002128:	3a01      	subs	r2, #1
 800212a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    pen_down();
    clockwise_A(30);
    pen_up();
}

int main(void) {
 800212e:	b510      	push	{r4, lr}
 8002130:	d21b      	bcs.n	800216a <main+0x4e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <main+0x58>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002134:	4910      	ldr	r1, [pc, #64]	; (8002178 <main+0x5c>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002136:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002138:	20f0      	movs	r0, #240	; 0xf0
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800213c:	2400      	movs	r4, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800213e:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002142:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002144:	601a      	str	r2, [r3, #0]
	setSysTick();
	config_PWM();
 8002146:	f7fe f89d 	bl	8000284 <config_PWM>
    gpio_init_motor();
 800214a:	f7fe f87f 	bl	800024c <gpio_init_motor>
    clockwise_B(65);
 800214e:	2041      	movs	r0, #65	; 0x41
 8002150:	f7fe fa64 	bl	800061c <clockwise_B>
    clockwise_A(65);
 8002154:	2041      	movs	r0, #65	; 0x41
 8002156:	f7fe f8f5 	bl	8000344 <clockwise_A>
    counterClockwise_B(65);
 800215a:	2041      	movs	r0, #65	; 0x41
 800215c:	f7fe fb08 	bl	8000770 <counterClockwise_B>
    counterClockwise_A(65);
 8002160:	2041      	movs	r0, #65	; 0x41
 8002162:	f7fe f9a5 	bl	80004b0 <counterClockwise_A>
        Delay(500);
        counterClockwise_B(10);*/

    
	return 0;
}
 8002166:	4620      	mov	r0, r4
 8002168:	bd10      	pop	{r4, pc}
 800216a:	e7fe      	b.n	800216a <main+0x4e>
 800216c:	20000010 	.word	0x20000010
 8002170:	10624dd3 	.word	0x10624dd3
 8002174:	e000e010 	.word	0xe000e010
 8002178:	e000ed00 	.word	0xe000ed00
